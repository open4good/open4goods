/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContactRequestDto,
  ContactResponseDto,
} from '../models/index';
import {
    ContactRequestDtoFromJSON,
    ContactRequestDtoToJSON,
    ContactResponseDtoFromJSON,
    ContactResponseDtoToJSON,
} from '../models/index';

export interface SubmitRequest {
    domainLanguage: SubmitDomainLanguageEnum;
    contactRequestDto: ContactRequestDto;
}

/**
 * 
 */
export class ContactApi extends runtime.BaseAPI {

    /**
     * Verify captcha token and forward the message to the support mailbox.
     * Submit a contact message
     */
    async submitRaw(requestParameters: SubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactResponseDto>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling submit().'
            );
        }

        if (requestParameters['contactRequestDto'] == null) {
            throw new runtime.RequiredError(
                'contactRequestDto',
                'Required parameter "contactRequestDto" was null or undefined when calling submit().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/contact`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactRequestDtoToJSON(requestParameters['contactRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactResponseDtoFromJSON(jsonValue));
    }

    /**
     * Verify captcha token and forward the message to the support mailbox.
     * Submit a contact message
     */
    async submit(requestParameters: SubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactResponseDto> {
        const response = await this.submitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SubmitDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type SubmitDomainLanguageEnum = typeof SubmitDomainLanguageEnum[keyof typeof SubmitDomainLanguageEnum];
