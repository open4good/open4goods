/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AffiliationPartnerDto,
  StaticPartnerDto,
} from '../models/index';
import {
    AffiliationPartnerDtoFromJSON,
    AffiliationPartnerDtoToJSON,
    StaticPartnerDtoFromJSON,
    StaticPartnerDtoToJSON,
} from '../models/index';

export interface AffiliationPartnersRequest {
    domainLanguage: AffiliationPartnersDomainLanguageEnum;
}

export interface EcosystemPartnersRequest {
    domainLanguage: EcosystemPartnersDomainLanguageEnum;
}

export interface MentorPartnersRequest {
    domainLanguage: MentorPartnersDomainLanguageEnum;
}

/**
 * 
 */
export class PartnerApi extends runtime.BaseAPI {

    /**
     * Return affiliation partners enriched with front-served logo and favicon URLs.
     * List affiliation partners
     */
    async affiliationPartnersRaw(requestParameters: AffiliationPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AffiliationPartnerDto>>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling affiliationPartners().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/partners/affiliation`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AffiliationPartnerDtoFromJSON));
    }

    /**
     * Return affiliation partners enriched with front-served logo and favicon URLs.
     * List affiliation partners
     */
    async affiliationPartners(requestParameters: AffiliationPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AffiliationPartnerDto>> {
        const response = await this.affiliationPartnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return ecosystem partners configured from application properties.
     * List ecosystem partners
     */
    async ecosystemPartnersRaw(requestParameters: EcosystemPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StaticPartnerDto>>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling ecosystemPartners().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/partners/ecosystem`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StaticPartnerDtoFromJSON));
    }

    /**
     * Return ecosystem partners configured from application properties.
     * List ecosystem partners
     */
    async ecosystemPartners(requestParameters: EcosystemPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StaticPartnerDto>> {
        const response = await this.ecosystemPartnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return mentor partners configured from application properties.
     * List mentor partners
     */
    async mentorPartnersRaw(requestParameters: MentorPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StaticPartnerDto>>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling mentorPartners().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/partners/mentors`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StaticPartnerDtoFromJSON));
    }

    /**
     * Return mentor partners configured from application properties.
     * List mentor partners
     */
    async mentorPartners(requestParameters: MentorPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StaticPartnerDto>> {
        const response = await this.mentorPartnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AffiliationPartnersDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type AffiliationPartnersDomainLanguageEnum = typeof AffiliationPartnersDomainLanguageEnum[keyof typeof AffiliationPartnersDomainLanguageEnum];
/**
 * @export
 */
export const EcosystemPartnersDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type EcosystemPartnersDomainLanguageEnum = typeof EcosystemPartnersDomainLanguageEnum[keyof typeof EcosystemPartnersDomainLanguageEnum];
/**
 * @export
 */
export const MentorPartnersDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type MentorPartnersDomainLanguageEnum = typeof MentorPartnersDomainLanguageEnum[keyof typeof MentorPartnersDomainLanguageEnum];
