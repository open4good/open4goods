/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommercialEvent,
} from '../models/index';
import {
    CommercialEventFromJSON,
    CommercialEventToJSON,
} from '../models/index';

export interface CommercialEventsRequest {
    domainLanguage: CommercialEventsDomainLanguageEnum;
}

/**
 * 
 */
export class CommercialEventsApi extends runtime.BaseAPI {

    /**
     * Return configured commercial events for the requested domain language.
     * List commercial events
     */
    async commercialEventsRaw(requestParameters: CommercialEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommercialEvent>>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling commercialEvents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/commercial-events`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CommercialEventFromJSON));
    }

    /**
     * Return configured commercial events for the requested domain language.
     * List commercial events
     */
    async commercialEvents(requestParameters: CommercialEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommercialEvent>> {
        const response = await this.commercialEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CommercialEventsDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type CommercialEventsDomainLanguageEnum = typeof CommercialEventsDomainLanguageEnum[keyof typeof CommercialEventsDomainLanguageEnum];
