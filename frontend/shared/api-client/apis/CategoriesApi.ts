/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryNavigationDto,
  VerticalConfigDto,
  VerticalConfigFullDto,
} from '../models/index';
import {
    CategoryNavigationDtoFromJSON,
    CategoryNavigationDtoToJSON,
    VerticalConfigDtoFromJSON,
    VerticalConfigDtoToJSON,
    VerticalConfigFullDtoFromJSON,
    VerticalConfigFullDtoToJSON,
} from '../models/index';

export interface Categories1Request {
    domainLanguage: Categories1DomainLanguageEnum;
    onlyEnabled?: boolean;
}

export interface CategoryRequest {
    categoryId: string;
    domainLanguage: CategoryDomainLanguageEnum;
}

export interface NavigationRequest {
    domainLanguage: NavigationDomainLanguageEnum;
    googleCategoryId?: number;
    path?: string;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * Return vertical configurations optionally filtered by their enabled status.
     * List categories
     */
    async categories1Raw(requestParameters: Categories1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VerticalConfigDto>>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling categories1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        if (requestParameters['onlyEnabled'] != null) {
            queryParameters['onlyEnabled'] = requestParameters['onlyEnabled'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/category`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VerticalConfigDtoFromJSON));
    }

    /**
     * Return vertical configurations optionally filtered by their enabled status.
     * List categories
     */
    async categories1(requestParameters: Categories1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VerticalConfigDto>> {
        const response = await this.categories1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the detailed vertical configuration identified by its id.
     * Get category details
     */
    async categoryRaw(requestParameters: CategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerticalConfigFullDto>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling category().'
            );
        }

        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling category().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/category/{categoryId}`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerticalConfigFullDtoFromJSON(jsonValue));
    }

    /**
     * Return the detailed vertical configuration identified by its id.
     * Get category details
     */
    async category(requestParameters: CategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerticalConfigFullDto> {
        const response = await this.categoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the Google taxonomy navigation data required to display deep category navigation.
     * Get category navigation
     */
    async navigationRaw(requestParameters: NavigationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryNavigationDto>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling navigation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        if (requestParameters['googleCategoryId'] != null) {
            queryParameters['googleCategoryId'] = requestParameters['googleCategoryId'];
        }

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/category/navigation`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryNavigationDtoFromJSON(jsonValue));
    }

    /**
     * Return the Google taxonomy navigation data required to display deep category navigation.
     * Get category navigation
     */
    async navigation(requestParameters: NavigationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryNavigationDto> {
        const response = await this.navigationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Categories1DomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type Categories1DomainLanguageEnum = typeof Categories1DomainLanguageEnum[keyof typeof Categories1DomainLanguageEnum];
/**
 * @export
 */
export const CategoryDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type CategoryDomainLanguageEnum = typeof CategoryDomainLanguageEnum[keyof typeof CategoryDomainLanguageEnum];
/**
 * @export
 */
export const NavigationDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type NavigationDomainLanguageEnum = typeof NavigationDomainLanguageEnum[keyof typeof NavigationDomainLanguageEnum];
