/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetail,
} from '../models/index';
import {
    ProblemDetailFromJSON,
    ProblemDetailToJSON,
} from '../models/index';

export interface RedirectGetRequest {
    token: string;
    domainLanguage: RedirectGetDomainLanguageEnum;
    userAgent?: string;
}

export interface RedirectPostRequest {
    token: string;
    domainLanguage: RedirectPostDomainLanguageEnum;
    userAgent?: string;
}

/**
 * 
 */
export class AffiliationApi extends runtime.BaseAPI {

    /**
     * Decode an affiliation token, persist tracking metadata and redirect the client.
     * Resolve affiliation token (GET)
     */
    async redirectGetRaw(requestParameters: RedirectGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling redirectGet().'
            );
        }

        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling redirectGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['userAgent'] != null) {
            headerParameters['User-Agent'] = String(requestParameters['userAgent']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/affiliations/redirect`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decode an affiliation token, persist tracking metadata and redirect the client.
     * Resolve affiliation token (GET)
     */
    async redirectGet(requestParameters: RedirectGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redirectGetRaw(requestParameters, initOverrides);
    }

    /**
     * Decode an affiliation token, persist tracking metadata and redirect the client.
     * Resolve affiliation token (POST)
     */
    async redirectPostRaw(requestParameters: RedirectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling redirectPost().'
            );
        }

        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling redirectPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['userAgent'] != null) {
            headerParameters['User-Agent'] = String(requestParameters['userAgent']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/affiliations/redirect`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decode an affiliation token, persist tracking metadata and redirect the client.
     * Resolve affiliation token (POST)
     */
    async redirectPost(requestParameters: RedirectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redirectPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const RedirectGetDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type RedirectGetDomainLanguageEnum = typeof RedirectGetDomainLanguageEnum[keyof typeof RedirectGetDomainLanguageEnum];
/**
 * @export
 */
export const RedirectPostDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type RedirectPostDomainLanguageEnum = typeof RedirectPostDomainLanguageEnum[keyof typeof RedirectPostDomainLanguageEnum];
