/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OpenDataDatasetDto,
  OpenDataOverviewDto,
} from '../models/index';
import {
    OpenDataDatasetDtoFromJSON,
    OpenDataDatasetDtoToJSON,
    OpenDataOverviewDtoFromJSON,
    OpenDataOverviewDtoToJSON,
} from '../models/index';

export interface GtinRequest {
    domainLanguage: GtinDomainLanguageEnum;
}

export interface IsbnRequest {
    domainLanguage: IsbnDomainLanguageEnum;
}

export interface OverviewRequest {
    domainLanguage: OverviewDomainLanguageEnum;
}

/**
 * 
 */
export class OpenDataApi extends runtime.BaseAPI {

    /**
     * Return metadata describing the GTIN OpenData export.
     * Get GTIN dataset metadata
     */
    async gtinRaw(requestParameters: GtinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenDataDatasetDto>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling gtin().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/opendata/gtin`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenDataDatasetDtoFromJSON(jsonValue));
    }

    /**
     * Return metadata describing the GTIN OpenData export.
     * Get GTIN dataset metadata
     */
    async gtin(requestParameters: GtinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenDataDatasetDto> {
        const response = await this.gtinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return metadata describing the ISBN OpenData export.
     * Get ISBN dataset metadata
     */
    async isbnRaw(requestParameters: IsbnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenDataDatasetDto>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling isbn().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/opendata/isbn`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenDataDatasetDtoFromJSON(jsonValue));
    }

    /**
     * Return metadata describing the ISBN OpenData export.
     * Get ISBN dataset metadata
     */
    async isbn(requestParameters: IsbnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenDataDatasetDto> {
        const response = await this.isbnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return aggregated metadata about the available GTIN and ISBN datasets.
     * Get OpenData overview
     */
    async overviewRaw(requestParameters: OverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenDataOverviewDto>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling overview().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/opendata`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenDataOverviewDtoFromJSON(jsonValue));
    }

    /**
     * Return aggregated metadata about the available GTIN and ISBN datasets.
     * Get OpenData overview
     */
    async overview(requestParameters: OverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenDataOverviewDto> {
        const response = await this.overviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GtinDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type GtinDomainLanguageEnum = typeof GtinDomainLanguageEnum[keyof typeof GtinDomainLanguageEnum];
/**
 * @export
 */
export const IsbnDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type IsbnDomainLanguageEnum = typeof IsbnDomainLanguageEnum[keyof typeof IsbnDomainLanguageEnum];
/**
 * @export
 */
export const OverviewDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type OverviewDomainLanguageEnum = typeof OverviewDomainLanguageEnum[keyof typeof OverviewDomainLanguageEnum];
