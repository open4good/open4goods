/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AggregationRequestDto,
  PageDto,
  PageProductDto,
  ProductDto,
} from '../models/index';
import {
    AggregationRequestDtoFromJSON,
    AggregationRequestDtoToJSON,
    PageDtoFromJSON,
    PageDtoToJSON,
    PageProductDtoFromJSON,
    PageProductDtoToJSON,
    ProductDtoFromJSON,
    ProductDtoToJSON,
} from '../models/index';

export interface AggregatableFieldsRequest {
    domainLanguage: AggregatableFieldsDomainLanguageEnum;
}

export interface ComponentsRequest {
    domainLanguage: ComponentsDomainLanguageEnum;
}

export interface ProductRequest {
    gtin: number;
    domainLanguage: ProductDomainLanguageEnum;
    include?: Array<ProductIncludeEnum>;
}

export interface ProductsRequest {
    domainLanguage: ProductsDomainLanguageEnum;
    include?: Array<ProductsIncludeEnum>;
    pageNumber?: number;
    pageSize?: number;
    sort?: Array<ProductsSortEnum>;
    aggregation?: AggregationRequestDto;
}

export interface SortableFieldsRequest {
    domainLanguage: SortableFieldsDomainLanguageEnum;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     * Return the list of fields available for aggregation.
     * Get aggregatable fields
     */
    async aggregatableFieldsRaw(requestParameters: AggregatableFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling aggregatableFields().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/products/fields/aggregatable`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return the list of fields available for aggregation.
     * Get aggregatable fields
     */
    async aggregatableFields(requestParameters: AggregatableFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.aggregatableFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the list of components that can be included in product responses.
     * Get available components
     */
    async componentsRaw(requestParameters: ComponentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling components().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/products/fields/components`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return the list of components that can be included in product responses.
     * Get available components
     */
    async components(requestParameters: ComponentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.componentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return high‑level product information and aggregated scores.
     * Get product view
     */
    async productRaw(requestParameters: ProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDto>> {
        if (requestParameters['gtin'] == null) {
            throw new runtime.RequiredError(
                'gtin',
                'Required parameter "gtin" was null or undefined when calling product().'
            );
        }

        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling product().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/products/{gtin}`;
        urlPath = urlPath.replace(`{${"gtin"}}`, encodeURIComponent(String(requestParameters['gtin'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }

    /**
     * Return high‑level product information and aggregated scores.
     * Get product view
     */
    async product(requestParameters: ProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDto> {
        const response = await this.productRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return paginated products.
     * List products
     */
    async productsRaw(requestParameters: ProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageDto>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling products().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['aggregation'] != null) {
            queryParameters['aggregation'] = requestParameters['aggregation'];
        }

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/products`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageDtoFromJSON(jsonValue));
    }

    /**
     * Return paginated products.
     * List products
     */
    async products(requestParameters: ProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageDto> {
        const response = await this.productsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the list of fields accepted by the sort parameter.
     * Get sortable fields
     */
    async sortableFieldsRaw(requestParameters: SortableFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling sortableFields().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/products/fields/sortable`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return the list of fields accepted by the sort parameter.
     * Get sortable fields
     */
    async sortableFields(requestParameters: SortableFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.sortableFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AggregatableFieldsDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type AggregatableFieldsDomainLanguageEnum = typeof AggregatableFieldsDomainLanguageEnum[keyof typeof AggregatableFieldsDomainLanguageEnum];
/**
 * @export
 */
export const ComponentsDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type ComponentsDomainLanguageEnum = typeof ComponentsDomainLanguageEnum[keyof typeof ComponentsDomainLanguageEnum];
/**
 * @export
 */
export const ProductDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type ProductDomainLanguageEnum = typeof ProductDomainLanguageEnum[keyof typeof ProductDomainLanguageEnum];
/**
 * @export
 */
export const ProductIncludeEnum = {
    Base: 'base',
    Identity: 'identity',
    Names: 'names',
    Attributes: 'attributes',
    Resources: 'resources',
    Datasources: 'datasources',
    Scores: 'scores',
    Ranking: 'ranking',
    AiTexts: 'aiTexts',
    AiReview: 'aiReview',
    Offers: 'offers'
} as const;
export type ProductIncludeEnum = typeof ProductIncludeEnum[keyof typeof ProductIncludeEnum];
/**
 * @export
 */
export const ProductsDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type ProductsDomainLanguageEnum = typeof ProductsDomainLanguageEnum[keyof typeof ProductsDomainLanguageEnum];
/**
 * @export
 */
export const ProductsIncludeEnum = {
    Base: 'base',
    Identity: 'identity',
    Names: 'names',
    Attributes: 'attributes',
    Resources: 'resources',
    Datasources: 'datasources',
    Scores: 'scores',
    Ranking: 'ranking',
    AiTexts: 'aiTexts',
    AiReview: 'aiReview',
    Offers: 'offers'
} as const;
export type ProductsIncludeEnum = typeof ProductsIncludeEnum[keyof typeof ProductsIncludeEnum];
/**
 * @export
 */
export const ProductsSortEnum = {
    PriceMinPricePrice: 'price.minPrice.price',
    OffersCount: 'offersCount'
} as const;
export type ProductsSortEnum = typeof ProductsSortEnum[keyof typeof ProductsSortEnum];
/**
 * @export
 */
export const SortableFieldsDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type SortableFieldsDomainLanguageEnum = typeof SortableFieldsDomainLanguageEnum[keyof typeof SortableFieldsDomainLanguageEnum];
