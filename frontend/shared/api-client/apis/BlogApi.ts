/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { BlogPostDto, BlogTagDto, PageDto } from '../models/index'
import {
  BlogPostDtoFromJSON,
  BlogPostDtoToJSON,
  BlogTagDtoFromJSON,
  BlogTagDtoToJSON,
  PageDtoFromJSON,
  PageDtoToJSON,
} from '../models/index'

export interface PostRequest {
  slug: string
  domainLanguage: PostDomainLanguageEnum
}

export interface PostsRequest {
  domainLanguage: PostsDomainLanguageEnum
  tag?: string
  pageNumber?: number
  pageSize?: number
}

export interface RssRequest {
  domainLanguage: RssDomainLanguageEnum
}

export interface TagsRequest {
  domainLanguage: TagsDomainLanguageEnum
}

/**
 *
 */
export class BlogApi extends runtime.BaseAPI {
  /**
   * Return a single blog post identified by its slug.
   * Get blog post
   */
  async postRaw(
    requestParameters: PostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<BlogPostDto>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling post().'
      )
    }

    if (requestParameters['domainLanguage'] == null) {
      throw new runtime.RequiredError(
        'domainLanguage',
        'Required parameter "domainLanguage" was null or undefined when calling post().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['domainLanguage'] != null) {
      queryParameters['domainLanguage'] = requestParameters['domainLanguage']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('bearerAuth', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    let urlPath = `/blog/posts/{slug}`
    urlPath = urlPath.replace(
      `{${'slug'}}`,
      encodeURIComponent(String(requestParameters['slug']))
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue =>
      BlogPostDtoFromJSON(jsonValue)
    )
  }

  /**
   * Return a single blog post identified by its slug.
   * Get blog post
   */
  async post(
    requestParameters: PostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<BlogPostDto> {
    const response = await this.postRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Return paginated blog posts optionally filtered by tag.
   * List blog posts
   */
  async postsRaw(
    requestParameters: PostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PageDto>> {
    if (requestParameters['domainLanguage'] == null) {
      throw new runtime.RequiredError(
        'domainLanguage',
        'Required parameter "domainLanguage" was null or undefined when calling posts().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['tag'] != null) {
      queryParameters['tag'] = requestParameters['tag']
    }

    if (requestParameters['pageNumber'] != null) {
      queryParameters['pageNumber'] = requestParameters['pageNumber']
    }

    if (requestParameters['pageSize'] != null) {
      queryParameters['pageSize'] = requestParameters['pageSize']
    }

    if (requestParameters['domainLanguage'] != null) {
      queryParameters['domainLanguage'] = requestParameters['domainLanguage']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('bearerAuth', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    let urlPath = `/blog/posts`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue =>
      PageDtoFromJSON(jsonValue)
    )
  }

  /**
   * Return paginated blog posts optionally filtered by tag.
   * List blog posts
   */
  async posts(
    requestParameters: PostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PageDto> {
    const response = await this.postsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Return an RSS feed for all blog posts.
   * Blog RSS feed
   */
  async rssRaw(
    requestParameters: RssRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['domainLanguage'] == null) {
      throw new runtime.RequiredError(
        'domainLanguage',
        'Required parameter "domainLanguage" was null or undefined when calling rss().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['domainLanguage'] != null) {
      queryParameters['domainLanguage'] = requestParameters['domainLanguage']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('bearerAuth', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    let urlPath = `/blog/rss`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Return an RSS feed for all blog posts.
   * Blog RSS feed
   */
  async rss(
    requestParameters: RssRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.rssRaw(requestParameters, initOverrides)
  }

  /**
   * Return the list of available blog tags with post counts.
   * List blog tags
   */
  async tagsRaw(
    requestParameters: TagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<BlogTagDto>>> {
    if (requestParameters['domainLanguage'] == null) {
      throw new runtime.RequiredError(
        'domainLanguage',
        'Required parameter "domainLanguage" was null or undefined when calling tags().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['domainLanguage'] != null) {
      queryParameters['domainLanguage'] = requestParameters['domainLanguage']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('bearerAuth', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    let urlPath = `/blog/tags`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(BlogTagDtoFromJSON)
    )
  }

  /**
   * Return the list of available blog tags with post counts.
   * List blog tags
   */
  async tags(
    requestParameters: TagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<BlogTagDto>> {
    const response = await this.tagsRaw(requestParameters, initOverrides)
    return await response.value()
  }
}

/**
 * @export
 */
export const PostDomainLanguageEnum = {
  Fr: 'fr',
  En: 'en',
} as const
export type PostDomainLanguageEnum =
  (typeof PostDomainLanguageEnum)[keyof typeof PostDomainLanguageEnum]
/**
 * @export
 */
export const PostsDomainLanguageEnum = {
  Fr: 'fr',
  En: 'en',
} as const
export type PostsDomainLanguageEnum =
  (typeof PostsDomainLanguageEnum)[keyof typeof PostsDomainLanguageEnum]
/**
 * @export
 */
export const RssDomainLanguageEnum = {
  Fr: 'fr',
  En: 'en',
} as const
export type RssDomainLanguageEnum =
  (typeof RssDomainLanguageEnum)[keyof typeof RssDomainLanguageEnum]
/**
 * @export
 */
export const TagsDomainLanguageEnum = {
  Fr: 'fr',
  En: 'en',
} as const
export type TagsDomainLanguageEnum =
  (typeof TagsDomainLanguageEnum)[keyof typeof TagsDomainLanguageEnum]
