/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FullPage,
  XwikiContentBlocDto,
} from '../models/index';
import {
    FullPageFromJSON,
    FullPageToJSON,
    XwikiContentBlocDtoFromJSON,
    XwikiContentBlocDtoToJSON,
} from '../models/index';

export interface ContentBlocRequest {
    blocId: string;
}

export interface PageRequest {
    xwikiPageId: string;
}

/**
 * 
 */
export class ContentApi extends runtime.BaseAPI {

    /**
     * Return the HTML content of the given XWiki bloc.
     * Get content bloc
     */
    async contentBlocRaw(requestParameters: ContentBlocRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<XwikiContentBlocDto>> {
        if (requestParameters['blocId'] == null) {
            throw new runtime.RequiredError(
                'blocId',
                'Required parameter "blocId" was null or undefined when calling contentBloc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blocs/{blocId}`;
        urlPath = urlPath.replace(`{${"blocId"}}`, encodeURIComponent(String(requestParameters['blocId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => XwikiContentBlocDtoFromJSON(jsonValue));
    }

    /**
     * Return the HTML content of the given XWiki bloc.
     * Get content bloc
     */
    async contentBloc(requestParameters: ContentBlocRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<XwikiContentBlocDto> {
        const response = await this.contentBlocRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the rendered XWiki page along with metadata.
     * Get XWiki page
     */
    async pageRaw(requestParameters: PageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullPage>> {
        if (requestParameters['xwikiPageId'] == null) {
            throw new runtime.RequiredError(
                'xwikiPageId',
                'Required parameter "xwikiPageId" was null or undefined when calling page().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/pages/{xwikiPageId}`;
        urlPath = urlPath.replace(`{${"xwikiPageId"}}`, encodeURIComponent(String(requestParameters['xwikiPageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullPageFromJSON(jsonValue));
    }

    /**
     * Return the rendered XWiki page along with metadata.
     * Get XWiki page
     */
    async page(requestParameters: PageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullPage> {
        const response = await this.pageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
