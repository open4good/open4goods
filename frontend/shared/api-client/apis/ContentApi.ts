/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FullPage,
  XwikiContentBlocDto,
} from '../models/index';
import {
    FullPageFromJSON,
    FullPageToJSON,
    XwikiContentBlocDtoFromJSON,
    XwikiContentBlocDtoToJSON,
} from '../models/index';

export interface ContentBlocRequest {
    blocId: string;
    domainLanguage: ContentBlocDomainLanguageEnum;
}

export interface PageRequest {
    xwikiPageId: string;
    domainLanguage: PageDomainLanguageEnum;
}

export interface PagesRequest {
    domainLanguage: PagesDomainLanguageEnum;
}

/**
 * 
 */
export class ContentApi extends runtime.BaseAPI {

    /**
     * Return the HTML content of the given XWiki bloc.
     * Get content bloc
     */
    async contentBlocRaw(requestParameters: ContentBlocRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<XwikiContentBlocDto>> {
        if (requestParameters['blocId'] == null) {
            throw new runtime.RequiredError(
                'blocId',
                'Required parameter "blocId" was null or undefined when calling contentBloc().'
            );
        }

        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling contentBloc().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/blocs/{blocId}`;
        urlPath = urlPath.replace(`{${"blocId"}}`, encodeURIComponent(String(requestParameters['blocId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => XwikiContentBlocDtoFromJSON(jsonValue));
    }

    /**
     * Return the HTML content of the given XWiki bloc.
     * Get content bloc
     */
    async contentBloc(requestParameters: ContentBlocRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<XwikiContentBlocDto> {
        const response = await this.contentBlocRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the rendered XWiki page along with metadata.
     * Get XWiki page
     */
    async pageRaw(requestParameters: PageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullPage>> {
        if (requestParameters['xwikiPageId'] == null) {
            throw new runtime.RequiredError(
                'xwikiPageId',
                'Required parameter "xwikiPageId" was null or undefined when calling page().'
            );
        }

        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling page().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/pages/{xwikiPageId}`;
        urlPath = urlPath.replace(`{${"xwikiPageId"}}`, encodeURIComponent(String(requestParameters['xwikiPageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullPageFromJSON(jsonValue));
    }

    /**
     * Return the rendered XWiki page along with metadata.
     * Get XWiki page
     */
    async page(requestParameters: PageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullPage> {
        const response = await this.pageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of pages available for rendering
     * List XWiki pages
     */
    async pagesRaw(requestParameters: PagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling pages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/pages`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List of pages available for rendering
     * List XWiki pages
     */
    async pages(requestParameters: PagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pagesRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ContentBlocDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type ContentBlocDomainLanguageEnum = typeof ContentBlocDomainLanguageEnum[keyof typeof ContentBlocDomainLanguageEnum];
/**
 * @export
 */
export const PageDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type PageDomainLanguageEnum = typeof PageDomainLanguageEnum[keyof typeof PageDomainLanguageEnum];
/**
 * @export
 */
export const PagesDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type PagesDomainLanguageEnum = typeof PagesDomainLanguageEnum[keyof typeof PagesDomainLanguageEnum];
