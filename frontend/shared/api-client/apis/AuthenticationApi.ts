/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthTokensDto,
  LoginRequest,
} from '../models/index';
import {
    AuthTokensDtoFromJSON,
    AuthTokensDtoToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
} from '../models/index';

export interface LoginOperationRequest {
    domainLanguage: LoginOperationDomainLanguageEnum;
    loginRequest: LoginRequest;
}

export interface RefreshRequest {
    domainLanguage: RefreshDomainLanguageEnum;
    refreshToken: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Validate credentials against XWiki and return JWT tokens as cookies.
     * Login with XWiki credentials
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTokensDto>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling login().'
            );
        }

        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokensDtoFromJSON(jsonValue));
    }

    /**
     * Validate credentials against XWiki and return JWT tokens as cookies.
     * Login with XWiki credentials
     */
    async login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTokensDto> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Issue a new access token using the refresh token cookie.
     * Refresh access token
     */
    async refreshRaw(requestParameters: RefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTokensDto>> {
        if (requestParameters['domainLanguage'] == null) {
            throw new runtime.RequiredError(
                'domainLanguage',
                'Required parameter "domainLanguage" was null or undefined when calling refresh().'
            );
        }

        if (requestParameters['refreshToken'] == null) {
            throw new runtime.RequiredError(
                'refreshToken',
                'Required parameter "refreshToken" was null or undefined when calling refresh().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainLanguage'] != null) {
            queryParameters['domainLanguage'] = requestParameters['domainLanguage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokensDtoFromJSON(jsonValue));
    }

    /**
     * Issue a new access token using the refresh token cookie.
     * Refresh access token
     */
    async refresh(requestParameters: RefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTokensDto> {
        const response = await this.refreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const LoginOperationDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type LoginOperationDomainLanguageEnum = typeof LoginOperationDomainLanguageEnum[keyof typeof LoginOperationDomainLanguageEnum];
/**
 * @export
 */
export const RefreshDomainLanguageEnum = {
    Fr: 'fr',
    En: 'en'
} as const;
export type RefreshDomainLanguageEnum = typeof RefreshDomainLanguageEnum[keyof typeof RefreshDomainLanguageEnum];
