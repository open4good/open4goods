/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface AttributeParserConfig
 */
export interface AttributeParserConfig {
  /**
   *
   * @type {boolean}
   * @memberof AttributeParserConfig
   */
  normalize?: boolean
  /**
   *
   * @type {boolean}
   * @memberof AttributeParserConfig
   */
  trim?: boolean
  /**
   *
   * @type {boolean}
   * @memberof AttributeParserConfig
   */
  lowerCase?: boolean
  /**
   *
   * @type {boolean}
   * @memberof AttributeParserConfig
   */
  upperCase?: boolean
  /**
   *
   * @type {string}
   * @memberof AttributeParserConfig
   */
  clazz?: string
  /**
   *
   * @type {boolean}
   * @memberof AttributeParserConfig
   */
  removeParenthesis?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof AttributeParserConfig
   */
  deleteTokens?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof AttributeParserConfig
   */
  tokenMatch?: Array<string>
}

/**
 * Check if a given object implements the AttributeParserConfig interface.
 */
export function instanceOfAttributeParserConfig(
  value: object
): value is AttributeParserConfig {
  return true
}

export function AttributeParserConfigFromJSON(
  json: any
): AttributeParserConfig {
  return AttributeParserConfigFromJSONTyped(json, false)
}

export function AttributeParserConfigFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AttributeParserConfig {
  if (json == null) {
    return json
  }
  return {
    normalize: json['normalize'] == null ? undefined : json['normalize'],
    trim: json['trim'] == null ? undefined : json['trim'],
    lowerCase: json['lowerCase'] == null ? undefined : json['lowerCase'],
    upperCase: json['upperCase'] == null ? undefined : json['upperCase'],
    clazz: json['clazz'] == null ? undefined : json['clazz'],
    removeParenthesis:
      json['removeParenthesis'] == null ? undefined : json['removeParenthesis'],
    deleteTokens:
      json['deleteTokens'] == null ? undefined : json['deleteTokens'],
    tokenMatch: json['tokenMatch'] == null ? undefined : json['tokenMatch'],
  }
}

export function AttributeParserConfigToJSON(json: any): AttributeParserConfig {
  return AttributeParserConfigToJSONTyped(json, false)
}

export function AttributeParserConfigToJSONTyped(
  value?: AttributeParserConfig | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value
  }

  return {
    normalize: value['normalize'],
    trim: value['trim'],
    lowerCase: value['lowerCase'],
    upperCase: value['upperCase'],
    clazz: value['clazz'],
    removeParenthesis: value['removeParenthesis'],
    deleteTokens: value['deleteTokens'],
    tokenMatch: value['tokenMatch'],
  }
}
