/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductCardinalityDto } from './ProductCardinalityDto';
import {
    ProductCardinalityDtoFromJSON,
    ProductCardinalityDtoFromJSONTyped,
    ProductCardinalityDtoToJSON,
    ProductCardinalityDtoToJSONTyped,
} from './ProductCardinalityDto';
import type { ProductReferenceDto } from './ProductReferenceDto';
import {
    ProductReferenceDtoFromJSON,
    ProductReferenceDtoFromJSONTyped,
    ProductReferenceDtoToJSON,
    ProductReferenceDtoToJSONTyped,
} from './ProductReferenceDto';

/**
 * 
 * @export
 * @interface ProductScoreDto
 */
export interface ProductScoreDto {
    /**
     * Score id
     * @type {string}
     * @memberof ProductScoreDto
     */
    id?: string;
    /**
     * Score name
     * @type {string}
     * @memberof ProductScoreDto
     */
    name?: string;
    /**
     * Score description
     * @type {string}
     * @memberof ProductScoreDto
     */
    description?: string;
    /**
     * Whether the score is virtual
     * @type {boolean}
     * @memberof ProductScoreDto
     */
    virtual?: boolean;
    /**
     * Raw score value
     * @type {number}
     * @memberof ProductScoreDto
     */
    value?: number;
    /**
     * Absolute cardinality information
     * @type {ProductCardinalityDto}
     * @memberof ProductScoreDto
     */
    absolute?: ProductCardinalityDto;
    /**
     * Relative cardinality information
     * @type {ProductCardinalityDto}
     * @memberof ProductScoreDto
     */
    relativ?: ProductCardinalityDto;
    /**
     * Additional metadata
     * @type {{ [key: string]: string; }}
     * @memberof ProductScoreDto
     */
    metadatas?: { [key: string]: string; };
    /**
     * Ranking of the product for this score
     * @type {number}
     * @memberof ProductScoreDto
     */
    ranking?: number;
    /**
     * Details for the product with the lowest score
     * @type {ProductReferenceDto}
     * @memberof ProductScoreDto
     */
    lowestScore?: ProductReferenceDto;
    /**
     * Details for the product with the highest score
     * @type {ProductReferenceDto}
     * @memberof ProductScoreDto
     */
    highestScore?: ProductReferenceDto;
    /**
     * Percentage representation of the score on a 0-100 scale
     * @type {number}
     * @memberof ProductScoreDto
     */
    percent?: number;
    /**
     * Score scaled on 0-20
     * @type {number}
     * @memberof ProductScoreDto
     */
    on20?: number;
    /**
     * Absolute value formatted as text
     * @type {string}
     * @memberof ProductScoreDto
     */
    absoluteValue?: string;
    /**
     * Relative value formatted as text
     * @type {string}
     * @memberof ProductScoreDto
     */
    relativeValue?: string;
    /**
     * Letter grade representation
     * @type {string}
     * @memberof ProductScoreDto
     */
    letter?: string;
}

/**
 * Check if a given object implements the ProductScoreDto interface.
 */
export function instanceOfProductScoreDto(value: object): value is ProductScoreDto {
    return true;
}

export function ProductScoreDtoFromJSON(json: any): ProductScoreDto {
    return ProductScoreDtoFromJSONTyped(json, false);
}

export function ProductScoreDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductScoreDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'virtual': json['virtual'] == null ? undefined : json['virtual'],
        'value': json['value'] == null ? undefined : json['value'],
        'absolute': json['absolute'] == null ? undefined : ProductCardinalityDtoFromJSON(json['absolute']),
        'relativ': json['relativ'] == null ? undefined : ProductCardinalityDtoFromJSON(json['relativ']),
        'metadatas': json['metadatas'] == null ? undefined : json['metadatas'],
        'ranking': json['ranking'] == null ? undefined : json['ranking'],
        'lowestScore': json['lowestScore'] == null ? undefined : ProductReferenceDtoFromJSON(json['lowestScore']),
        'highestScore': json['highestScore'] == null ? undefined : ProductReferenceDtoFromJSON(json['highestScore']),
        'percent': json['percent'] == null ? undefined : json['percent'],
        'on20': json['on20'] == null ? undefined : json['on20'],
        'absoluteValue': json['absoluteValue'] == null ? undefined : json['absoluteValue'],
        'relativeValue': json['relativeValue'] == null ? undefined : json['relativeValue'],
        'letter': json['letter'] == null ? undefined : json['letter'],
    };
}

export function ProductScoreDtoToJSON(json: any): ProductScoreDto {
    return ProductScoreDtoToJSONTyped(json, false);
}

export function ProductScoreDtoToJSONTyped(value?: ProductScoreDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'virtual': value['virtual'],
        'value': value['value'],
        'absolute': ProductCardinalityDtoToJSON(value['absolute']),
        'relativ': ProductCardinalityDtoToJSON(value['relativ']),
        'metadatas': value['metadatas'],
        'ranking': value['ranking'],
        'lowestScore': ProductReferenceDtoToJSON(value['lowestScore']),
        'highestScore': ProductReferenceDtoToJSON(value['highestScore']),
        'percent': value['percent'],
        'on20': value['on20'],
        'absoluteValue': value['absoluteValue'],
        'relativeValue': value['relativeValue'],
        'letter': value['letter'],
    };
}

