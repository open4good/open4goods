/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Attribute } from './Attribute';
import {
    AttributeFromJSON,
    AttributeFromJSONTyped,
    AttributeToJSON,
    AttributeToJSONTyped,
} from './Attribute';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
    LinkToJSONTyped,
} from './Link';

/**
 * 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * 
     * @type {Array<Link>}
     * @memberof Property
     */
    links?: Array<Link>;
    /**
     * 
     * @type {Array<Attribute>}
     * @memberof Property
     */
    attributes?: Array<Attribute>;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    type?: string;
}

/**
 * Check if a given object implements the Property interface.
 */
export function instanceOfProperty(value: object): value is Property {
    return true;
}

export function PropertyFromJSON(json: any): Property {
    return PropertyFromJSONTyped(json, false);
}

export function PropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Property {
    if (json == null) {
        return json;
    }
    return {
        
        'links': json['links'] == null ? undefined : ((json['links'] as Array<any>).map(LinkFromJSON)),
        'attributes': json['attributes'] == null ? undefined : ((json['attributes'] as Array<any>).map(AttributeFromJSON)),
        'value': json['value'] == null ? undefined : json['value'],
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function PropertyToJSON(json: any): Property {
    return PropertyToJSONTyped(json, false);
}

export function PropertyToJSONTyped(value?: Property | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'links': value['links'] == null ? undefined : ((value['links'] as Array<any>).map(LinkToJSON)),
        'attributes': value['attributes'] == null ? undefined : ((value['attributes'] as Array<any>).map(AttributeToJSON)),
        'value': value['value'],
        'name': value['name'],
        'type': value['type'],
    };
}

