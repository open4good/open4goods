/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Detailed description of a single OpenData dataset.
 * @export
 * @interface OpenDataDatasetDto
 */
export interface OpenDataDatasetDto {
    /**
     * Identifier of the dataset.
     * @type {string}
     * @memberof OpenDataDatasetDto
     */
    type?: OpenDataDatasetDtoTypeEnum;
    /**
     * Number of rows in the dataset formatted using the requested locale.
     * @type {string}
     * @memberof OpenDataDatasetDto
     */
    recordCount?: string;
    /**
     * Last update timestamp formatted using the requested locale.
     * @type {string}
     * @memberof OpenDataDatasetDto
     */
    lastUpdated?: string;
    /**
     * Human readable size of the dataset formatted using the requested locale.
     * @type {string}
     * @memberof OpenDataDatasetDto
     */
    fileSize?: string;
    /**
     * Absolute URL that can be used to download the dataset.
     * @type {string}
     * @memberof OpenDataDatasetDto
     */
    downloadUrl?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof OpenDataDatasetDto
     */
    headers?: Array<any>;
}


/**
 * @export
 */
export const OpenDataDatasetDtoTypeEnum = {
    Gtin: 'GTIN',
    Isbn: 'ISBN'
} as const;
export type OpenDataDatasetDtoTypeEnum = typeof OpenDataDatasetDtoTypeEnum[keyof typeof OpenDataDatasetDtoTypeEnum];


/**
 * Check if a given object implements the OpenDataDatasetDto interface.
 */
export function instanceOfOpenDataDatasetDto(value: object): value is OpenDataDatasetDto {
    return true;
}

export function OpenDataDatasetDtoFromJSON(json: any): OpenDataDatasetDto {
    return OpenDataDatasetDtoFromJSONTyped(json, false);
}

export function OpenDataDatasetDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenDataDatasetDto {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'recordCount': json['recordCount'] == null ? undefined : json['recordCount'],
        'lastUpdated': json['lastUpdated'] == null ? undefined : json['lastUpdated'],
        'fileSize': json['fileSize'] == null ? undefined : json['fileSize'],
        'downloadUrl': json['downloadUrl'] == null ? undefined : json['downloadUrl'],
        'headers': json['headers'] == null ? undefined : json['headers'],
    };
}

export function OpenDataDatasetDtoToJSON(json: any): OpenDataDatasetDto {
    return OpenDataDatasetDtoToJSONTyped(json, false);
}

export function OpenDataDatasetDtoToJSONTyped(value?: OpenDataDatasetDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'recordCount': value['recordCount'],
        'lastUpdated': value['lastUpdated'],
        'fileSize': value['fileSize'],
        'downloadUrl': value['downloadUrl'],
        'headers': value['headers'],
    };
}

