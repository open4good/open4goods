/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Hierarchy } from './Hierarchy';
import {
    HierarchyFromJSON,
    HierarchyFromJSONTyped,
    HierarchyToJSON,
    HierarchyToJSONTyped,
} from './Hierarchy';
import type { Objects } from './Objects';
import {
    ObjectsFromJSON,
    ObjectsFromJSONTyped,
    ObjectsToJSON,
    ObjectsToJSONTyped,
} from './Objects';
import type { Class } from './Class';
import {
    ClassFromJSON,
    ClassFromJSONTyped,
    ClassToJSON,
    ClassToJSONTyped,
} from './Class';
import type { Attachments } from './Attachments';
import {
    AttachmentsFromJSON,
    AttachmentsFromJSONTyped,
    AttachmentsToJSON,
    AttachmentsToJSONTyped,
} from './Attachments';
import type { Translations } from './Translations';
import {
    TranslationsFromJSON,
    TranslationsFromJSONTyped,
    TranslationsToJSON,
    TranslationsToJSONTyped,
} from './Translations';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
    LinkToJSONTyped,
} from './Link';

/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 
     * @type {Array<Link>}
     * @memberof Page
     */
    links?: Array<Link>;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    wiki?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    space?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    rawTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    parent?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    parentId?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    authorName?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    xwikiRelativeUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    xwikiAbsoluteUrl?: string;
    /**
     * 
     * @type {Translations}
     * @memberof Page
     */
    translations?: Translations;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    syntax?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    language?: string;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    majorVersion?: number;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    minorVersion?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Page
     */
    hidden?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Page
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    creator?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    creatorName?: string;
    /**
     * 
     * @type {Date}
     * @memberof Page
     */
    modified?: Date;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    modifier?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    modifierName?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    originalMetadataAuthor?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    originalMetadataAuthorName?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    content?: string;
    /**
     * 
     * @type {Class}
     * @memberof Page
     */
    clazz?: Class;
    /**
     * 
     * @type {Objects}
     * @memberof Page
     */
    objects?: Objects;
    /**
     * 
     * @type {Attachments}
     * @memberof Page
     */
    attachments?: Attachments;
    /**
     * 
     * @type {Hierarchy}
     * @memberof Page
     */
    hierarchy?: Hierarchy;
}

/**
 * Check if a given object implements the Page interface.
 */
export function instanceOfPage(value: object): value is Page {
    return true;
}

export function PageFromJSON(json: any): Page {
    return PageFromJSONTyped(json, false);
}

export function PageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Page {
    if (json == null) {
        return json;
    }
    return {
        
        'links': json['links'] == null ? undefined : ((json['links'] as Array<any>).map(LinkFromJSON)),
        'id': json['id'] == null ? undefined : json['id'],
        'fullName': json['fullName'] == null ? undefined : json['fullName'],
        'wiki': json['wiki'] == null ? undefined : json['wiki'],
        'space': json['space'] == null ? undefined : json['space'],
        'name': json['name'] == null ? undefined : json['name'],
        'title': json['title'] == null ? undefined : json['title'],
        'rawTitle': json['rawTitle'] == null ? undefined : json['rawTitle'],
        'parent': json['parent'] == null ? undefined : json['parent'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'version': json['version'] == null ? undefined : json['version'],
        'author': json['author'] == null ? undefined : json['author'],
        'authorName': json['authorName'] == null ? undefined : json['authorName'],
        'xwikiRelativeUrl': json['xwikiRelativeUrl'] == null ? undefined : json['xwikiRelativeUrl'],
        'xwikiAbsoluteUrl': json['xwikiAbsoluteUrl'] == null ? undefined : json['xwikiAbsoluteUrl'],
        'translations': json['translations'] == null ? undefined : TranslationsFromJSON(json['translations']),
        'syntax': json['syntax'] == null ? undefined : json['syntax'],
        'language': json['language'] == null ? undefined : json['language'],
        'majorVersion': json['majorVersion'] == null ? undefined : json['majorVersion'],
        'minorVersion': json['minorVersion'] == null ? undefined : json['minorVersion'],
        'hidden': json['hidden'] == null ? undefined : json['hidden'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'creator': json['creator'] == null ? undefined : json['creator'],
        'creatorName': json['creatorName'] == null ? undefined : json['creatorName'],
        'modified': json['modified'] == null ? undefined : (new Date(json['modified'])),
        'modifier': json['modifier'] == null ? undefined : json['modifier'],
        'modifierName': json['modifierName'] == null ? undefined : json['modifierName'],
        'originalMetadataAuthor': json['originalMetadataAuthor'] == null ? undefined : json['originalMetadataAuthor'],
        'originalMetadataAuthorName': json['originalMetadataAuthorName'] == null ? undefined : json['originalMetadataAuthorName'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'content': json['content'] == null ? undefined : json['content'],
        'clazz': json['clazz'] == null ? undefined : ClassFromJSON(json['clazz']),
        'objects': json['objects'] == null ? undefined : ObjectsFromJSON(json['objects']),
        'attachments': json['attachments'] == null ? undefined : AttachmentsFromJSON(json['attachments']),
        'hierarchy': json['hierarchy'] == null ? undefined : HierarchyFromJSON(json['hierarchy']),
    };
}

export function PageToJSON(json: any): Page {
    return PageToJSONTyped(json, false);
}

export function PageToJSONTyped(value?: Page | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'links': value['links'] == null ? undefined : ((value['links'] as Array<any>).map(LinkToJSON)),
        'id': value['id'],
        'fullName': value['fullName'],
        'wiki': value['wiki'],
        'space': value['space'],
        'name': value['name'],
        'title': value['title'],
        'rawTitle': value['rawTitle'],
        'parent': value['parent'],
        'parentId': value['parentId'],
        'version': value['version'],
        'author': value['author'],
        'authorName': value['authorName'],
        'xwikiRelativeUrl': value['xwikiRelativeUrl'],
        'xwikiAbsoluteUrl': value['xwikiAbsoluteUrl'],
        'translations': TranslationsToJSON(value['translations']),
        'syntax': value['syntax'],
        'language': value['language'],
        'majorVersion': value['majorVersion'],
        'minorVersion': value['minorVersion'],
        'hidden': value['hidden'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'creator': value['creator'],
        'creatorName': value['creatorName'],
        'modified': value['modified'] == null ? undefined : ((value['modified']).toISOString()),
        'modifier': value['modifier'],
        'modifierName': value['modifierName'],
        'originalMetadataAuthor': value['originalMetadataAuthor'],
        'originalMetadataAuthorName': value['originalMetadataAuthorName'],
        'comment': value['comment'],
        'content': value['content'],
        'clazz': ClassToJSON(value['clazz']),
        'objects': ObjectsToJSON(value['objects']),
        'attachments': AttachmentsToJSON(value['attachments']),
        'hierarchy': HierarchyToJSON(value['hierarchy']),
    };
}

