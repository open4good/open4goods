/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AttributeConfigDto } from './AttributeConfigDto';
import {
    AttributeConfigDtoFromJSON,
    AttributeConfigDtoFromJSONTyped,
    AttributeConfigDtoToJSON,
    AttributeConfigDtoToJSONTyped,
} from './AttributeConfigDto';

/**
 * 
 * @export
 * @interface AttributesConfigDto
 */
export interface AttributesConfigDto {
    /**
     * Attribute configurations defined for the vertical.
     * @type {Array<AttributeConfigDto>}
     * @memberof AttributesConfigDto
     */
    configs?: Array<AttributeConfigDto>;
    /**
     * Attribute values considered as featured for highlighting.
     * @type {Set<string>}
     * @memberof AttributesConfigDto
     */
    featuredValues?: Set<string>;
    /**
     * Attribute names excluded from aggregation.
     * @type {Set<string>}
     * @memberof AttributesConfigDto
     */
    exclusions?: Set<string>;
}

/**
 * Check if a given object implements the AttributesConfigDto interface.
 */
export function instanceOfAttributesConfigDto(value: object): value is AttributesConfigDto {
    return true;
}

export function AttributesConfigDtoFromJSON(json: any): AttributesConfigDto {
    return AttributesConfigDtoFromJSONTyped(json, false);
}

export function AttributesConfigDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttributesConfigDto {
    if (json == null) {
        return json;
    }
    return {
        
        'configs': json['configs'] == null ? undefined : ((json['configs'] as Array<any>).map(AttributeConfigDtoFromJSON)),
        'featuredValues': json['featuredValues'] == null ? undefined : new Set(json['featuredValues']),
        'exclusions': json['exclusions'] == null ? undefined : new Set(json['exclusions']),
    };
}

export function AttributesConfigDtoToJSON(json: any): AttributesConfigDto {
    return AttributesConfigDtoToJSONTyped(json, false);
}

export function AttributesConfigDtoToJSONTyped(value?: AttributesConfigDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'configs': value['configs'] == null ? undefined : ((value['configs'] as Array<any>).map(AttributeConfigDtoToJSON)),
        'featuredValues': value['featuredValues'] == null ? undefined : Array.from(value['featuredValues'] as Set<any>),
        'exclusions': value['exclusions'] == null ? undefined : Array.from(value['exclusions'] as Set<any>),
    };
}

