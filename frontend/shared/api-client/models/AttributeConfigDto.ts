/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AttributeParserConfig } from './AttributeParserConfig';
import {
    AttributeParserConfigFromJSON,
    AttributeParserConfigFromJSONTyped,
    AttributeParserConfigToJSON,
    AttributeParserConfigToJSONTyped,
} from './AttributeParserConfig';

/**
 * 
 * @export
 * @interface AttributeConfigDto
 */
export interface AttributeConfigDto {
    /**
     * Unique key identifying the attribute.
     * @type {string}
     * @memberof AttributeConfigDto
     */
    key?: string;
    /**
     * Font Awesome icon associated with the attribute.
     * @type {string}
     * @memberof AttributeConfigDto
     */
    faIcon?: string;
    /**
     * Localised unit displayed for this attribute.
     * @type {string}
     * @memberof AttributeConfigDto
     */
    unit?: string;
    /**
     * Localised display name for this attribute.
     * @type {string}
     * @memberof AttributeConfigDto
     */
    name?: string;
    /**
     * Type of filtering applied for this attribute.
     * @type {string}
     * @memberof AttributeConfigDto
     */
    filteringType?: AttributeConfigDtoFilteringTypeEnum;
    /**
     * Identifiers of the Icecat features mapped to this attribute.
     * @type {Set<string>}
     * @memberof AttributeConfigDto
     */
    icecatFeaturesIds?: Set<string>;
    /**
     * Indicates whether this attribute is exposed as a score.
     * @type {boolean}
     * @memberof AttributeConfigDto
     */
    asScore?: boolean;
    /**
     * Indicates whether lower values should yield higher scores.
     * @type {boolean}
     * @memberof AttributeConfigDto
     */
    reverseScore?: boolean;
    /**
     * Ordering applied when displaying attribute values.
     * @type {string}
     * @memberof AttributeConfigDto
     */
    attributeValuesOrdering?: AttributeConfigDtoAttributeValuesOrderingEnum;
    /**
     * When true, the attribute values ordering is reversed.
     * @type {boolean}
     * @memberof AttributeConfigDto
     */
    attributeValuesReverseOrder?: boolean;
    /**
     * Attribute synonyms keyed by datasource name.
     * @type {{ [key: string]: Set<string>; }}
     * @memberof AttributeConfigDto
     */
    synonyms?: { [key: string]: Set<string>; };
    /**
     * Custom parser configuration used to normalize attribute values.
     * @type {AttributeParserConfig}
     * @memberof AttributeConfigDto
     */
    parser?: AttributeParserConfig;
    /**
     * Mapping used to convert textual values to numerics when relevant.
     * @type {{ [key: string]: number; }}
     * @memberof AttributeConfigDto
     */
    numericMapping?: { [key: string]: number; };
    /**
     * Static replacements applied to attribute values.
     * @type {{ [key: string]: string; }}
     * @memberof AttributeConfigDto
     */
    mappings?: { [key: string]: string; };
}


/**
 * @export
 */
export const AttributeConfigDtoFilteringTypeEnum = {
    Boolean: 'BOOLEAN',
    Numeric: 'NUMERIC',
    Text: 'TEXT'
} as const;
export type AttributeConfigDtoFilteringTypeEnum = typeof AttributeConfigDtoFilteringTypeEnum[keyof typeof AttributeConfigDtoFilteringTypeEnum];

/**
 * @export
 */
export const AttributeConfigDtoAttributeValuesOrderingEnum = {
    Alpha: 'ALPHA',
    Count: 'COUNT',
    Mapped: 'MAPPED'
} as const;
export type AttributeConfigDtoAttributeValuesOrderingEnum = typeof AttributeConfigDtoAttributeValuesOrderingEnum[keyof typeof AttributeConfigDtoAttributeValuesOrderingEnum];


/**
 * Check if a given object implements the AttributeConfigDto interface.
 */
export function instanceOfAttributeConfigDto(value: object): value is AttributeConfigDto {
    return true;
}

export function AttributeConfigDtoFromJSON(json: any): AttributeConfigDto {
    return AttributeConfigDtoFromJSONTyped(json, false);
}

export function AttributeConfigDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttributeConfigDto {
    if (json == null) {
        return json;
    }
    return {
        
        'key': json['key'] == null ? undefined : json['key'],
        'faIcon': json['faIcon'] == null ? undefined : json['faIcon'],
        'unit': json['unit'] == null ? undefined : json['unit'],
        'name': json['name'] == null ? undefined : json['name'],
        'filteringType': json['filteringType'] == null ? undefined : json['filteringType'],
        'icecatFeaturesIds': json['icecatFeaturesIds'] == null ? undefined : new Set(json['icecatFeaturesIds']),
        'asScore': json['asScore'] == null ? undefined : json['asScore'],
        'reverseScore': json['reverseScore'] == null ? undefined : json['reverseScore'],
        'attributeValuesOrdering': json['attributeValuesOrdering'] == null ? undefined : json['attributeValuesOrdering'],
        'attributeValuesReverseOrder': json['attributeValuesReverseOrder'] == null ? undefined : json['attributeValuesReverseOrder'],
        'synonyms': json['synonyms'] == null ? undefined : json['synonyms'],
        'parser': json['parser'] == null ? undefined : AttributeParserConfigFromJSON(json['parser']),
        'numericMapping': json['numericMapping'] == null ? undefined : json['numericMapping'],
        'mappings': json['mappings'] == null ? undefined : json['mappings'],
    };
}

export function AttributeConfigDtoToJSON(json: any): AttributeConfigDto {
    return AttributeConfigDtoToJSONTyped(json, false);
}

export function AttributeConfigDtoToJSONTyped(value?: AttributeConfigDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'key': value['key'],
        'faIcon': value['faIcon'],
        'unit': value['unit'],
        'name': value['name'],
        'filteringType': value['filteringType'],
        'icecatFeaturesIds': value['icecatFeaturesIds'] == null ? undefined : Array.from(value['icecatFeaturesIds'] as Set<any>),
        'asScore': value['asScore'],
        'reverseScore': value['reverseScore'],
        'attributeValuesOrdering': value['attributeValuesOrdering'],
        'attributeValuesReverseOrder': value['attributeValuesReverseOrder'],
        'synonyms': value['synonyms'],
        'parser': AttributeParserConfigToJSON(value['parser']),
        'numericMapping': value['numericMapping'],
        'mappings': value['mappings'],
    };
}

