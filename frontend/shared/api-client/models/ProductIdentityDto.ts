/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProductIdentityDto
 */
export interface ProductIdentityDto {
    /**
     * Preferred brand extracted from referential attributes
     * @type {string}
     * @memberof ProductIdentityDto
     */
    brand?: string;
    /**
     * Preferred model extracted from referential attributes
     * @type {string}
     * @memberof ProductIdentityDto
     */
    model?: string;
    /**
     * Best human readable name synthesised from brand and model when available
     * @type {string}
     * @memberof ProductIdentityDto
     */
    bestName?: string;
    /**
     * Randomly selected model amongst the known alternatives
     * @type {string}
     * @memberof ProductIdentityDto
     */
    randomModel?: string;
    /**
     * Shortest known model value
     * @type {string}
     * @memberof ProductIdentityDto
     */
    shortestModel?: string;
    /**
     * Set of alternative model identifiers discovered across datasources
     * @type {Set<string>}
     * @memberof ProductIdentityDto
     */
    akaModels?: Set<string>;
    /**
     * Alternative brand values keyed by datasource
     * @type {{ [key: string]: string; }}
     * @memberof ProductIdentityDto
     */
    akaBrandsByDatasource?: { [key: string]: string; };
    /**
     * Distinct set of alternative brand values
     * @type {Set<string>}
     * @memberof ProductIdentityDto
     */
    akaBrands?: Set<string>;
}

/**
 * Check if a given object implements the ProductIdentityDto interface.
 */
export function instanceOfProductIdentityDto(value: object): value is ProductIdentityDto {
    return true;
}

export function ProductIdentityDtoFromJSON(json: any): ProductIdentityDto {
    return ProductIdentityDtoFromJSONTyped(json, false);
}

export function ProductIdentityDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductIdentityDto {
    if (json == null) {
        return json;
    }
    return {
        
        'brand': json['brand'] == null ? undefined : json['brand'],
        'model': json['model'] == null ? undefined : json['model'],
        'bestName': json['bestName'] == null ? undefined : json['bestName'],
        'randomModel': json['randomModel'] == null ? undefined : json['randomModel'],
        'shortestModel': json['shortestModel'] == null ? undefined : json['shortestModel'],
        'akaModels': json['akaModels'] == null ? undefined : new Set(json['akaModels']),
        'akaBrandsByDatasource': json['akaBrandsByDatasource'] == null ? undefined : json['akaBrandsByDatasource'],
        'akaBrands': json['akaBrands'] == null ? undefined : new Set(json['akaBrands']),
    };
}

export function ProductIdentityDtoToJSON(json: any): ProductIdentityDto {
    return ProductIdentityDtoToJSONTyped(json, false);
}

export function ProductIdentityDtoToJSONTyped(value?: ProductIdentityDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'brand': value['brand'],
        'model': value['model'],
        'bestName': value['bestName'],
        'randomModel': value['randomModel'],
        'shortestModel': value['shortestModel'],
        'akaModels': value['akaModels'] == null ? undefined : Array.from(value['akaModels'] as Set<any>),
        'akaBrandsByDatasource': value['akaBrandsByDatasource'],
        'akaBrands': value['akaBrands'] == null ? undefined : Array.from(value['akaBrands'] as Set<any>),
    };
}

