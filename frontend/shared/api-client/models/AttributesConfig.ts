/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AttributeConfig } from './AttributeConfig';
import {
    AttributeConfigFromJSON,
    AttributeConfigFromJSONTyped,
    AttributeConfigToJSON,
    AttributeConfigToJSONTyped,
} from './AttributeConfig';

/**
 * 
 * @export
 * @interface AttributesConfig
 */
export interface AttributesConfig {
    /**
     * 
     * @type {Array<AttributeConfig>}
     * @memberof AttributesConfig
     */
    configs?: Array<AttributeConfig>;
    /**
     * 
     * @type {Set<string>}
     * @memberof AttributesConfig
     */
    featuredValues?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof AttributesConfig
     */
    exclusions?: Set<string>;
}

/**
 * Check if a given object implements the AttributesConfig interface.
 */
export function instanceOfAttributesConfig(value: object): value is AttributesConfig {
    return true;
}

export function AttributesConfigFromJSON(json: any): AttributesConfig {
    return AttributesConfigFromJSONTyped(json, false);
}

export function AttributesConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttributesConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'configs': json['configs'] == null ? undefined : ((json['configs'] as Array<any>).map(AttributeConfigFromJSON)),
        'featuredValues': json['featuredValues'] == null ? undefined : new Set(json['featuredValues']),
        'exclusions': json['exclusions'] == null ? undefined : new Set(json['exclusions']),
    };
}

export function AttributesConfigToJSON(json: any): AttributesConfig {
    return AttributesConfigToJSONTyped(json, false);
}

export function AttributesConfigToJSONTyped(value?: AttributesConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'configs': value['configs'] == null ? undefined : ((value['configs'] as Array<any>).map(AttributeConfigToJSON)),
        'featuredValues': value['featuredValues'] == null ? undefined : Array.from(value['featuredValues'] as Set<any>),
        'exclusions': value['exclusions'] == null ? undefined : Array.from(value['exclusions'] as Set<any>),
    };
}

