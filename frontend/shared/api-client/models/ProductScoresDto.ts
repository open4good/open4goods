/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductScoreDto } from './ProductScoreDto';
import {
    ProductScoreDtoFromJSON,
    ProductScoreDtoFromJSONTyped,
    ProductScoreDtoToJSON,
    ProductScoreDtoToJSONTyped,
} from './ProductScoreDto';

/**
 * 
 * @export
 * @interface ProductScoresDto
 */
export interface ProductScoresDto {
    /**
     * All scores keyed by their identifier
     * @type {{ [key: string]: ProductScoreDto; }}
     * @memberof ProductScoresDto
     */
    scores?: { [key: string]: ProductScoreDto; };
    /**
     * Scores computed from real measurements
     * @type {Array<ProductScoreDto>}
     * @memberof ProductScoresDto
     */
    realScores?: Array<ProductScoreDto>;
    /**
     * Scores computed virtually
     * @type {Array<ProductScoreDto>}
     * @memberof ProductScoresDto
     */
    virtualScores?: Array<ProductScoreDto>;
    /**
     * Ecoscore when available
     * @type {ProductScoreDto}
     * @memberof ProductScoresDto
     */
    ecoscore?: ProductScoreDto;
    /**
     * Score identifiers where the product ranks amongst the worst
     * @type {Set<string>}
     * @memberof ProductScoresDto
     */
    worstScores?: Set<string>;
    /**
     * Score identifiers where the product ranks amongst the best
     * @type {Set<string>}
     * @memberof ProductScoresDto
     */
    bestScores?: Set<string>;
}

/**
 * Check if a given object implements the ProductScoresDto interface.
 */
export function instanceOfProductScoresDto(value: object): value is ProductScoresDto {
    return true;
}

export function ProductScoresDtoFromJSON(json: any): ProductScoresDto {
    return ProductScoresDtoFromJSONTyped(json, false);
}

export function ProductScoresDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductScoresDto {
    if (json == null) {
        return json;
    }
    return {
        
        'scores': json['scores'] == null ? undefined : (mapValues(json['scores'], ProductScoreDtoFromJSON)),
        'realScores': json['realScores'] == null ? undefined : ((json['realScores'] as Array<any>).map(ProductScoreDtoFromJSON)),
        'virtualScores': json['virtualScores'] == null ? undefined : ((json['virtualScores'] as Array<any>).map(ProductScoreDtoFromJSON)),
        'ecoscore': json['ecoscore'] == null ? undefined : ProductScoreDtoFromJSON(json['ecoscore']),
        'worstScores': json['worstScores'] == null ? undefined : new Set(json['worstScores']),
        'bestScores': json['bestScores'] == null ? undefined : new Set(json['bestScores']),
    };
}

export function ProductScoresDtoToJSON(json: any): ProductScoresDto {
    return ProductScoresDtoToJSONTyped(json, false);
}

export function ProductScoresDtoToJSONTyped(value?: ProductScoresDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'scores': value['scores'] == null ? undefined : (mapValues(value['scores'], ProductScoreDtoToJSON)),
        'realScores': value['realScores'] == null ? undefined : ((value['realScores'] as Array<any>).map(ProductScoreDtoToJSON)),
        'virtualScores': value['virtualScores'] == null ? undefined : ((value['virtualScores'] as Array<any>).map(ProductScoreDtoToJSON)),
        'ecoscore': ProductScoreDtoToJSON(value['ecoscore']),
        'worstScores': value['worstScores'] == null ? undefined : Array.from(value['worstScores'] as Set<any>),
        'bestScores': value['bestScores'] == null ? undefined : Array.from(value['bestScores'] as Set<any>),
    };
}

