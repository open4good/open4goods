/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProductAggregatedPriceDto
 */
export interface ProductAggregatedPriceDto {
    /**
     * Datasource providing the offer
     * @type {string}
     * @memberof ProductAggregatedPriceDto
     */
    datasourceName?: string;
    /**
     * Displayed offer title
     * @type {string}
     * @memberof ProductAggregatedPriceDto
     */
    offerName?: string;
    /**
     * Target URL of the offer
     * @type {string}
     * @memberof ProductAggregatedPriceDto
     */
    url?: string;
    /**
     * Compensation paid when the offer is converted
     * @type {number}
     * @memberof ProductAggregatedPriceDto
     */
    compensation?: number;
    /**
     * Condition of the product for this offer
     * @type {string}
     * @memberof ProductAggregatedPriceDto
     */
    condition?: ProductAggregatedPriceDtoConditionEnum;
    /**
     * Affiliation token when available
     * @type {string}
     * @memberof ProductAggregatedPriceDto
     */
    affiliationToken?: string;
    /**
     * Price value
     * @type {number}
     * @memberof ProductAggregatedPriceDto
     */
    price?: number;
    /**
     * Currency of the price
     * @type {string}
     * @memberof ProductAggregatedPriceDto
     */
    currency?: ProductAggregatedPriceDtoCurrencyEnum;
    /**
     * Timestamp of the price in epoch milliseconds
     * @type {number}
     * @memberof ProductAggregatedPriceDto
     */
    timeStamp?: number;
    /**
     * Human friendly representation of the price
     * @type {string}
     * @memberof ProductAggregatedPriceDto
     */
    shortPrice?: string;
}


/**
 * @export
 */
export const ProductAggregatedPriceDtoConditionEnum = {
    Occasion: 'OCCASION',
    New: 'NEW'
} as const;
export type ProductAggregatedPriceDtoConditionEnum = typeof ProductAggregatedPriceDtoConditionEnum[keyof typeof ProductAggregatedPriceDtoConditionEnum];

/**
 * @export
 */
export const ProductAggregatedPriceDtoCurrencyEnum = {
    Eur: 'EUR',
    Usd: 'USD',
    Cny: 'CNY'
} as const;
export type ProductAggregatedPriceDtoCurrencyEnum = typeof ProductAggregatedPriceDtoCurrencyEnum[keyof typeof ProductAggregatedPriceDtoCurrencyEnum];


/**
 * Check if a given object implements the ProductAggregatedPriceDto interface.
 */
export function instanceOfProductAggregatedPriceDto(value: object): value is ProductAggregatedPriceDto {
    return true;
}

export function ProductAggregatedPriceDtoFromJSON(json: any): ProductAggregatedPriceDto {
    return ProductAggregatedPriceDtoFromJSONTyped(json, false);
}

export function ProductAggregatedPriceDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductAggregatedPriceDto {
    if (json == null) {
        return json;
    }
    return {
        
        'datasourceName': json['datasourceName'] == null ? undefined : json['datasourceName'],
        'offerName': json['offerName'] == null ? undefined : json['offerName'],
        'url': json['url'] == null ? undefined : json['url'],
        'compensation': json['compensation'] == null ? undefined : json['compensation'],
        'condition': json['condition'] == null ? undefined : json['condition'],
        'affiliationToken': json['affiliationToken'] == null ? undefined : json['affiliationToken'],
        'price': json['price'] == null ? undefined : json['price'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'timeStamp': json['timeStamp'] == null ? undefined : json['timeStamp'],
        'shortPrice': json['shortPrice'] == null ? undefined : json['shortPrice'],
    };
}

export function ProductAggregatedPriceDtoToJSON(json: any): ProductAggregatedPriceDto {
    return ProductAggregatedPriceDtoToJSONTyped(json, false);
}

export function ProductAggregatedPriceDtoToJSONTyped(value?: ProductAggregatedPriceDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'datasourceName': value['datasourceName'],
        'offerName': value['offerName'],
        'url': value['url'],
        'compensation': value['compensation'],
        'condition': value['condition'],
        'affiliationToken': value['affiliationToken'],
        'price': value['price'],
        'currency': value['currency'],
        'timeStamp': value['timeStamp'],
        'shortPrice': value['shortPrice'],
    };
}

