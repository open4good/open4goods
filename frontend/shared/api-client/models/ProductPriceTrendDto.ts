/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProductPriceTrendDto
 */
export interface ProductPriceTrendDto {
    /**
     * Direction of the price evolution compared to the previous entry
     * @type {string}
     * @memberof ProductPriceTrendDto
     */
    trend?: ProductPriceTrendDtoTrendEnum;
    /**
     * Elapsed time in milliseconds between the two last price measurements
     * @type {number}
     * @memberof ProductPriceTrendDto
     */
    period?: number;
    /**
     * Current price used for the trend computation
     * @type {number}
     * @memberof ProductPriceTrendDto
     */
    actualPrice?: number;
    /**
     * Previous price used as a comparison point
     * @type {number}
     * @memberof ProductPriceTrendDto
     */
    lastPrice?: number;
    /**
     * Absolute price difference between the current and the previous value
     * @type {number}
     * @memberof ProductPriceTrendDto
     */
    variation?: number;
    /**
     * Lowest historical price found in the series
     * @type {number}
     * @memberof ProductPriceTrendDto
     */
    historicalLowestPrice?: number;
    /**
     * Difference between the current price and the historical lowest value
     * @type {number}
     * @memberof ProductPriceTrendDto
     */
    historicalVariation?: number;
}


/**
 * @export
 */
export const ProductPriceTrendDtoTrendEnum = {
    PriceDecrease: 'PRICE_DECREASE',
    PriceStable: 'PRICE_STABLE',
    PriceIncrease: 'PRICE_INCREASE'
} as const;
export type ProductPriceTrendDtoTrendEnum = typeof ProductPriceTrendDtoTrendEnum[keyof typeof ProductPriceTrendDtoTrendEnum];


/**
 * Check if a given object implements the ProductPriceTrendDto interface.
 */
export function instanceOfProductPriceTrendDto(value: object): value is ProductPriceTrendDto {
    return true;
}

export function ProductPriceTrendDtoFromJSON(json: any): ProductPriceTrendDto {
    return ProductPriceTrendDtoFromJSONTyped(json, false);
}

export function ProductPriceTrendDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductPriceTrendDto {
    if (json == null) {
        return json;
    }
    return {
        
        'trend': json['trend'] == null ? undefined : json['trend'],
        'period': json['period'] == null ? undefined : json['period'],
        'actualPrice': json['actualPrice'] == null ? undefined : json['actualPrice'],
        'lastPrice': json['lastPrice'] == null ? undefined : json['lastPrice'],
        'variation': json['variation'] == null ? undefined : json['variation'],
        'historicalLowestPrice': json['historicalLowestPrice'] == null ? undefined : json['historicalLowestPrice'],
        'historicalVariation': json['historicalVariation'] == null ? undefined : json['historicalVariation'],
    };
}

export function ProductPriceTrendDtoToJSON(json: any): ProductPriceTrendDto {
    return ProductPriceTrendDtoToJSONTyped(json, false);
}

export function ProductPriceTrendDtoToJSONTyped(value?: ProductPriceTrendDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'trend': value['trend'],
        'period': value['period'],
        'actualPrice': value['actualPrice'],
        'lastPrice': value['lastPrice'],
        'variation': value['variation'],
        'historicalLowestPrice': value['historicalLowestPrice'],
        'historicalVariation': value['historicalVariation'],
    };
}

