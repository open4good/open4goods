/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VerticalConfigI18nDto } from './VerticalConfigI18nDto';
import {
    VerticalConfigI18nDtoFromJSON,
    VerticalConfigI18nDtoFromJSONTyped,
    VerticalConfigI18nDtoToJSON,
    VerticalConfigI18nDtoToJSONTyped,
} from './VerticalConfigI18nDto';

/**
 * 
 * @export
 * @interface VerticalConfigDto
 */
export interface VerticalConfigDto {
    /**
     * Unique identifier of the vertical configuration.
     * @type {string}
     * @memberof VerticalConfigDto
     */
    id?: string;
    /**
     * Indicates whether the vertical is exposed to end-users.
     * @type {boolean}
     * @memberof VerticalConfigDto
     */
    enabled?: boolean;
    /**
     * Google taxonomy identifier associated with this vertical.
     * @type {number}
     * @memberof VerticalConfigDto
     */
    googleTaxonomyId?: number;
    /**
     * Icecat taxonomy identifier associated with this vertical.
     * @type {number}
     * @memberof VerticalConfigDto
     */
    icecatTaxonomyId?: number;
    /**
     * Display order used to render the category list.
     * @type {number}
     * @memberof VerticalConfigDto
     */
    order?: number;
    /**
     * Thumbnail image representing the vertical. TODO(front-api): populate when media assets are defined.
     * @type {string}
     * @memberof VerticalConfigDto
     */
    imageThumbnail?: string;
    /**
     * Primary image for the vertical hero section. TODO(front-api): populate when media assets are defined.
     * @type {string}
     * @memberof VerticalConfigDto
     */
    image?: string;
    /**
     * Localised singular label for the vertical. TODO(front-api): populate when naming strategy is available.
     * @type {string}
     * @memberof VerticalConfigDto
     */
    singularName?: string;
    /**
     * Localised plural label for the vertical. TODO(front-api): populate when naming strategy is available.
     * @type {string}
     * @memberof VerticalConfigDto
     */
    pluralName?: string;
    /**
     * Localised summary texts keyed by IETF BCP 47 language tag.
     * @type {{ [key: string]: VerticalConfigI18nDto; }}
     * @memberof VerticalConfigDto
     */
    i18n?: { [key: string]: VerticalConfigI18nDto; };
}

/**
 * Check if a given object implements the VerticalConfigDto interface.
 */
export function instanceOfVerticalConfigDto(value: object): value is VerticalConfigDto {
    return true;
}

export function VerticalConfigDtoFromJSON(json: any): VerticalConfigDto {
    return VerticalConfigDtoFromJSONTyped(json, false);
}

export function VerticalConfigDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerticalConfigDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'googleTaxonomyId': json['googleTaxonomyId'] == null ? undefined : json['googleTaxonomyId'],
        'icecatTaxonomyId': json['icecatTaxonomyId'] == null ? undefined : json['icecatTaxonomyId'],
        'order': json['order'] == null ? undefined : json['order'],
        'imageThumbnail': json['imageThumbnail'] == null ? undefined : json['imageThumbnail'],
        'image': json['image'] == null ? undefined : json['image'],
        'singularName': json['singularName'] == null ? undefined : json['singularName'],
        'pluralName': json['pluralName'] == null ? undefined : json['pluralName'],
        'i18n': json['i18n'] == null ? undefined : (mapValues(json['i18n'], VerticalConfigI18nDtoFromJSON)),
    };
}

export function VerticalConfigDtoToJSON(json: any): VerticalConfigDto {
    return VerticalConfigDtoToJSONTyped(json, false);
}

export function VerticalConfigDtoToJSONTyped(value?: VerticalConfigDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'enabled': value['enabled'],
        'googleTaxonomyId': value['googleTaxonomyId'],
        'icecatTaxonomyId': value['icecatTaxonomyId'],
        'order': value['order'],
        'imageThumbnail': value['imageThumbnail'],
        'image': value['image'],
        'singularName': value['singularName'],
        'pluralName': value['pluralName'],
        'i18n': value['i18n'] == null ? undefined : (mapValues(value['i18n'], VerticalConfigI18nDtoToJSON)),
    };
}

