/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * Field mapping targeted by the filter.
     * @type {string}
     * @memberof Filter
     */
    field?: string;
    /**
     * Filtering strategy to apply.
     * @type {string}
     * @memberof Filter
     */
    operator?: FilterOperatorEnum;
    /**
     * Exact values accepted when the operator is <code>term</code>. Multiple values are combined with OR semantics.
     * @type {Array<string>}
     * @memberof Filter
     */
    terms?: Array<string>;
    /**
     * Inclusive lower bound used when the operator is <code>range</code>.
     * @type {number}
     * @memberof Filter
     */
    min?: number;
    /**
     * Inclusive upper bound used when the operator is <code>range</code>.
     * @type {number}
     * @memberof Filter
     */
    max?: number;
}


/**
 * @export
 */
export const FilterOperatorEnum = {
    Term: 'term',
    Range: 'range'
} as const;
export type FilterOperatorEnum = typeof FilterOperatorEnum[keyof typeof FilterOperatorEnum];


/**
 * Check if a given object implements the Filter interface.
 */
export function instanceOfFilter(value: object): value is Filter {
    return true;
}

export function FilterFromJSON(json: any): Filter {
    return FilterFromJSONTyped(json, false);
}

export function FilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Filter {
    if (json == null) {
        return json;
    }
    return {
        
        'field': json['field'] == null ? undefined : json['field'],
        'operator': json['operator'] == null ? undefined : json['operator'],
        'terms': json['terms'] == null ? undefined : json['terms'],
        'min': json['min'] == null ? undefined : json['min'],
        'max': json['max'] == null ? undefined : json['max'],
    };
}

export function FilterToJSON(json: any): Filter {
    return FilterToJSONTyped(json, false);
}

export function FilterToJSONTyped(value?: Filter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'field': value['field'],
        'operator': value['operator'],
        'terms': value['terms'],
        'min': value['min'],
        'max': value['max'],
    };
}

