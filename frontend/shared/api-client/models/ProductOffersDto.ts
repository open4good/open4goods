/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductPriceHistoryDto } from './ProductPriceHistoryDto';
import {
    ProductPriceHistoryDtoFromJSON,
    ProductPriceHistoryDtoFromJSONTyped,
    ProductPriceHistoryDtoToJSON,
    ProductPriceHistoryDtoToJSONTyped,
} from './ProductPriceHistoryDto';
import type { ProductAggregatedPriceDto } from './ProductAggregatedPriceDto';
import {
    ProductAggregatedPriceDtoFromJSON,
    ProductAggregatedPriceDtoFromJSONTyped,
    ProductAggregatedPriceDtoToJSON,
    ProductAggregatedPriceDtoToJSONTyped,
} from './ProductAggregatedPriceDto';
import type { ProductPriceTrendDto } from './ProductPriceTrendDto';
import {
    ProductPriceTrendDtoFromJSON,
    ProductPriceTrendDtoFromJSONTyped,
    ProductPriceTrendDtoToJSON,
    ProductPriceTrendDtoToJSONTyped,
} from './ProductPriceTrendDto';

/**
 * 
 * @export
 * @interface ProductOffersDto
 */
export interface ProductOffersDto {
    /**
     * Number of offers aggregated for this product
     * @type {number}
     * @memberof ProductOffersDto
     */
    offersCount?: number;
    /**
     * Whether the catalogue exposes occasion offers for this product
     * @type {boolean}
     * @memberof ProductOffersDto
     */
    hasOccasions?: boolean;
    /**
     * Best price across all conditions
     * @type {ProductAggregatedPriceDto}
     * @memberof ProductOffersDto
     */
    bestPrice?: ProductAggregatedPriceDto;
    /**
     * Best price for new offers
     * @type {ProductAggregatedPriceDto}
     * @memberof ProductOffersDto
     */
    bestNewOffer?: ProductAggregatedPriceDto;
    /**
     * Best price for occasion offers
     * @type {ProductAggregatedPriceDto}
     * @memberof ProductOffersDto
     */
    bestOccasionOffer?: ProductAggregatedPriceDto;
    /**
     * Aggregated offers grouped by product condition
     * @type {{ [key: string]: Array<ProductAggregatedPriceDto>; }}
     * @memberof ProductOffersDto
     */
    offersByCondition?: { [key: string]: Array<ProductAggregatedPriceDto>; };
    /**
     * Price history for brand new products
     * @type {ProductPriceHistoryDto}
     * @memberof ProductOffersDto
     */
    newHistory?: ProductPriceHistoryDto;
    /**
     * Price history for second hand products
     * @type {ProductPriceHistoryDto}
     * @memberof ProductOffersDto
     */
    occasionHistory?: ProductPriceHistoryDto;
    /**
     * Trend computed from brand new offers
     * @type {ProductPriceTrendDto}
     * @memberof ProductOffersDto
     */
    newTrend?: ProductPriceTrendDto;
    /**
     * Trend computed from occasion offers
     * @type {ProductPriceTrendDto}
     * @memberof ProductOffersDto
     */
    occasionTrend?: ProductPriceTrendDto;
    /**
     * Gap between current best price and historical lowest price
     * @type {number}
     * @memberof ProductOffersDto
     */
    historyPriceGap?: number;
}

/**
 * Check if a given object implements the ProductOffersDto interface.
 */
export function instanceOfProductOffersDto(value: object): value is ProductOffersDto {
    return true;
}

export function ProductOffersDtoFromJSON(json: any): ProductOffersDto {
    return ProductOffersDtoFromJSONTyped(json, false);
}

export function ProductOffersDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductOffersDto {
    if (json == null) {
        return json;
    }
    return {
        
        'offersCount': json['offersCount'] == null ? undefined : json['offersCount'],
        'hasOccasions': json['hasOccasions'] == null ? undefined : json['hasOccasions'],
        'bestPrice': json['bestPrice'] == null ? undefined : ProductAggregatedPriceDtoFromJSON(json['bestPrice']),
        'bestNewOffer': json['bestNewOffer'] == null ? undefined : ProductAggregatedPriceDtoFromJSON(json['bestNewOffer']),
        'bestOccasionOffer': json['bestOccasionOffer'] == null ? undefined : ProductAggregatedPriceDtoFromJSON(json['bestOccasionOffer']),
        'offersByCondition': json['offersByCondition'] == null ? undefined : json['offersByCondition'],
        'newHistory': json['newHistory'] == null ? undefined : ProductPriceHistoryDtoFromJSON(json['newHistory']),
        'occasionHistory': json['occasionHistory'] == null ? undefined : ProductPriceHistoryDtoFromJSON(json['occasionHistory']),
        'newTrend': json['newTrend'] == null ? undefined : ProductPriceTrendDtoFromJSON(json['newTrend']),
        'occasionTrend': json['occasionTrend'] == null ? undefined : ProductPriceTrendDtoFromJSON(json['occasionTrend']),
        'historyPriceGap': json['historyPriceGap'] == null ? undefined : json['historyPriceGap'],
    };
}

export function ProductOffersDtoToJSON(json: any): ProductOffersDto {
    return ProductOffersDtoToJSONTyped(json, false);
}

export function ProductOffersDtoToJSONTyped(value?: ProductOffersDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'offersCount': value['offersCount'],
        'hasOccasions': value['hasOccasions'],
        'bestPrice': ProductAggregatedPriceDtoToJSON(value['bestPrice']),
        'bestNewOffer': ProductAggregatedPriceDtoToJSON(value['bestNewOffer']),
        'bestOccasionOffer': ProductAggregatedPriceDtoToJSON(value['bestOccasionOffer']),
        'offersByCondition': value['offersByCondition'],
        'newHistory': ProductPriceHistoryDtoToJSON(value['newHistory']),
        'occasionHistory': ProductPriceHistoryDtoToJSON(value['occasionHistory']),
        'newTrend': ProductPriceTrendDtoToJSON(value['newTrend']),
        'occasionTrend': ProductPriceTrendDtoToJSON(value['occasionTrend']),
        'historyPriceGap': value['historyPriceGap'],
    };
}

