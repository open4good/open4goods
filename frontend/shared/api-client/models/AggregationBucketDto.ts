/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AggregationBucketDto
 */
export interface AggregationBucketDto {
    /**
     * Bucket identifier. For numeric histograms this is the lower bound.
     * @type {string}
     * @memberof AggregationBucketDto
     */
    key?: string;
    /**
     * Upper bound when the bucket represents a numeric range.
     * @type {number}
     * @memberof AggregationBucketDto
     */
    to?: number;
    /**
     * Number of matching products contained in the bucket.
     * @type {number}
     * @memberof AggregationBucketDto
     */
    count?: number;
    /**
     * Whether this bucket corresponds to documents missing the aggregated field.
     * @type {boolean}
     * @memberof AggregationBucketDto
     */
    missing?: boolean;
}

/**
 * Check if a given object implements the AggregationBucketDto interface.
 */
export function instanceOfAggregationBucketDto(value: object): value is AggregationBucketDto {
    return true;
}

export function AggregationBucketDtoFromJSON(json: any): AggregationBucketDto {
    return AggregationBucketDtoFromJSONTyped(json, false);
}

export function AggregationBucketDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AggregationBucketDto {
    if (json == null) {
        return json;
    }
    return {
        
        'key': json['key'] == null ? undefined : json['key'],
        'to': json['to'] == null ? undefined : json['to'],
        'count': json['count'] == null ? undefined : json['count'],
        'missing': json['missing'] == null ? undefined : json['missing'],
    };
}

export function AggregationBucketDtoToJSON(json: any): AggregationBucketDto {
    return AggregationBucketDtoToJSONTyped(json, false);
}

export function AggregationBucketDtoToJSONTyped(value?: AggregationBucketDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'key': value['key'],
        'to': value['to'],
        'count': value['count'],
        'missing': value['missing'],
    };
}

