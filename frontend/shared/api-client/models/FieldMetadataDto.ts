/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Fields exposing technical attributes available for the vertical.
 * @export
 * @interface FieldMetadataDto
 */
export interface FieldMetadataDto {
    /**
     * Stable identifier of the field as exposed by the API.
     * @type {string}
     * @memberof FieldMetadataDto
     */
    id?: string;
    /**
     * Path of the field in the product document.
     * @type {string}
     * @memberof FieldMetadataDto
     */
    mapping?: string;
    /**
     * Localised display name for the field when available.
     * @type {string}
     * @memberof FieldMetadataDto
     */
    title?: string;
    /**
     * Localised description for the field when available.
     * @type {string}
     * @memberof FieldMetadataDto
     */
    description?: string;
}

/**
 * Check if a given object implements the FieldMetadataDto interface.
 */
export function instanceOfFieldMetadataDto(value: object): value is FieldMetadataDto {
    return true;
}

export function FieldMetadataDtoFromJSON(json: any): FieldMetadataDto {
    return FieldMetadataDtoFromJSONTyped(json, false);
}

export function FieldMetadataDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldMetadataDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'mapping': json['mapping'] == null ? undefined : json['mapping'],
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}

export function FieldMetadataDtoToJSON(json: any): FieldMetadataDto {
    return FieldMetadataDtoToJSONTyped(json, false);
}

export function FieldMetadataDtoToJSONTyped(value?: FieldMetadataDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'mapping': value['mapping'],
        'title': value['title'],
        'description': value['description'],
    };
}

