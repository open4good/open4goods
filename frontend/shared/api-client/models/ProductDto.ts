/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductAiTextsDto } from './ProductAiTextsDto';
import {
    ProductAiTextsDtoFromJSON,
    ProductAiTextsDtoFromJSONTyped,
    ProductAiTextsDtoToJSON,
    ProductAiTextsDtoToJSONTyped,
} from './ProductAiTextsDto';
import type { ProductNamesDto } from './ProductNamesDto';
import {
    ProductNamesDtoFromJSON,
    ProductNamesDtoFromJSONTyped,
    ProductNamesDtoToJSON,
    ProductNamesDtoToJSONTyped,
} from './ProductNamesDto';
import type { ProductAttributesDto } from './ProductAttributesDto';
import {
    ProductAttributesDtoFromJSON,
    ProductAttributesDtoFromJSONTyped,
    ProductAttributesDtoToJSON,
    ProductAttributesDtoToJSONTyped,
} from './ProductAttributesDto';
import type { ProductBaseDto } from './ProductBaseDto';
import {
    ProductBaseDtoFromJSON,
    ProductBaseDtoFromJSONTyped,
    ProductBaseDtoToJSON,
    ProductBaseDtoToJSONTyped,
} from './ProductBaseDto';
import type { ProductDatasourcesDto } from './ProductDatasourcesDto';
import {
    ProductDatasourcesDtoFromJSON,
    ProductDatasourcesDtoFromJSONTyped,
    ProductDatasourcesDtoToJSON,
    ProductDatasourcesDtoToJSONTyped,
} from './ProductDatasourcesDto';
import type { ProductIdentityDto } from './ProductIdentityDto';
import {
    ProductIdentityDtoFromJSON,
    ProductIdentityDtoFromJSONTyped,
    ProductIdentityDtoToJSON,
    ProductIdentityDtoToJSONTyped,
} from './ProductIdentityDto';
import type { ProductRankingDto } from './ProductRankingDto';
import {
    ProductRankingDtoFromJSON,
    ProductRankingDtoFromJSONTyped,
    ProductRankingDtoToJSON,
    ProductRankingDtoToJSONTyped,
} from './ProductRankingDto';
import type { ProductOffersDto } from './ProductOffersDto';
import {
    ProductOffersDtoFromJSON,
    ProductOffersDtoFromJSONTyped,
    ProductOffersDtoToJSON,
    ProductOffersDtoToJSONTyped,
} from './ProductOffersDto';
import type { ProductResourcesDto } from './ProductResourcesDto';
import {
    ProductResourcesDtoFromJSON,
    ProductResourcesDtoFromJSONTyped,
    ProductResourcesDtoToJSON,
    ProductResourcesDtoToJSONTyped,
} from './ProductResourcesDto';
import type { ProductAiReviewDto } from './ProductAiReviewDto';
import {
    ProductAiReviewDtoFromJSON,
    ProductAiReviewDtoFromJSONTyped,
    ProductAiReviewDtoToJSON,
    ProductAiReviewDtoToJSONTyped,
} from './ProductAiReviewDto';
import type { ProductScoresDto } from './ProductScoresDto';
import {
    ProductScoresDtoFromJSON,
    ProductScoresDtoFromJSONTyped,
    ProductScoresDtoToJSON,
    ProductScoresDtoToJSONTyped,
} from './ProductScoresDto';

/**
 * 
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
    /**
     * Product GTIN, it is the unique identifier
     * @type {number}
     * @memberof ProductDto
     */
    gtin?: number;
    /**
     * Canonical product URL previously exposed as names.url
     * @type {string}
     * @memberof ProductDto
     */
    slug?: string;
    /**
     * Fully qualified slug composed of the vertical home URL and the product slug
     * @type {string}
     * @memberof ProductDto
     */
    fullSlug?: string;
    /**
     * Basic product metadata
     * @type {ProductBaseDto}
     * @memberof ProductDto
     */
    base?: ProductBaseDto;
    /**
     * Identity facet exposing brand, model and alternate identifiers
     * @type {ProductIdentityDto}
     * @memberof ProductDto
     */
    identity?: ProductIdentityDto;
    /**
     * Localised textual information resolved using the domainLanguage query parameter when available.
     * @type {ProductNamesDto}
     * @memberof ProductDto
     */
    names?: ProductNamesDto;
    /**
     * Structured attributes aggregated from all datasources
     * @type {ProductAttributesDto}
     * @memberof ProductDto
     */
    attributes?: ProductAttributesDto;
    /**
     * Associated media resources
     * @type {ProductResourcesDto}
     * @memberof ProductDto
     */
    resources?: ProductResourcesDto;
    /**
     * Datasource related information
     * @type {ProductDatasourcesDto}
     * @memberof ProductDto
     */
    datasources?: ProductDatasourcesDto;
    /**
     * Score and ranking related information
     * @type {ProductScoresDto}
     * @memberof ProductDto
     */
    scores?: ProductScoresDto;
    /**
     * Ecoscore derived rankings
     * @type {ProductRankingDto}
     * @memberof ProductDto
     */
    ranking?: ProductRankingDto;
    /**
     * AI generated texts localised according to the requested domainLanguage when implemented.
     * @type {ProductAiTextsDto}
     * @memberof ProductDto
     */
    aiTexts?: ProductAiTextsDto;
    /**
     * AI-generated review matching the requested domainLanguage when localisation is enabled.
     * @type {ProductAiReviewDto}
     * @memberof ProductDto
     */
    aiReview?: ProductAiReviewDto;
    /**
     * Product offers and pricing information
     * @type {ProductOffersDto}
     * @memberof ProductDto
     */
    offers?: ProductOffersDto;
}

/**
 * Check if a given object implements the ProductDto interface.
 */
export function instanceOfProductDto(value: object): value is ProductDto {
    return true;
}

export function ProductDtoFromJSON(json: any): ProductDto {
    return ProductDtoFromJSONTyped(json, false);
}

export function ProductDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductDto {
    if (json == null) {
        return json;
    }
    return {
        
        'gtin': json['gtin'] == null ? undefined : json['gtin'],
        'slug': json['slug'] == null ? undefined : json['slug'],
        'fullSlug': json['fullSlug'] == null ? undefined : json['fullSlug'],
        'base': json['base'] == null ? undefined : ProductBaseDtoFromJSON(json['base']),
        'identity': json['identity'] == null ? undefined : ProductIdentityDtoFromJSON(json['identity']),
        'names': json['names'] == null ? undefined : ProductNamesDtoFromJSON(json['names']),
        'attributes': json['attributes'] == null ? undefined : ProductAttributesDtoFromJSON(json['attributes']),
        'resources': json['resources'] == null ? undefined : ProductResourcesDtoFromJSON(json['resources']),
        'datasources': json['datasources'] == null ? undefined : ProductDatasourcesDtoFromJSON(json['datasources']),
        'scores': json['scores'] == null ? undefined : ProductScoresDtoFromJSON(json['scores']),
        'ranking': json['ranking'] == null ? undefined : ProductRankingDtoFromJSON(json['ranking']),
        'aiTexts': json['aiTexts'] == null ? undefined : ProductAiTextsDtoFromJSON(json['aiTexts']),
        'aiReview': json['aiReview'] == null ? undefined : ProductAiReviewDtoFromJSON(json['aiReview']),
        'offers': json['offers'] == null ? undefined : ProductOffersDtoFromJSON(json['offers']),
    };
}

export function ProductDtoToJSON(json: any): ProductDto {
    return ProductDtoToJSONTyped(json, false);
}

export function ProductDtoToJSONTyped(value?: ProductDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'gtin': value['gtin'],
        'slug': value['slug'],
        'fullSlug': value['fullSlug'],
        'base': ProductBaseDtoToJSON(value['base']),
        'identity': ProductIdentityDtoToJSON(value['identity']),
        'names': ProductNamesDtoToJSON(value['names']),
        'attributes': ProductAttributesDtoToJSON(value['attributes']),
        'resources': ProductResourcesDtoToJSON(value['resources']),
        'datasources': ProductDatasourcesDtoToJSON(value['datasources']),
        'scores': ProductScoresDtoToJSON(value['scores']),
        'ranking': ProductRankingDtoToJSON(value['ranking']),
        'aiTexts': ProductAiTextsDtoToJSON(value['aiTexts']),
        'aiReview': ProductAiReviewDtoToJSON(value['aiReview']),
        'offers': ProductOffersDtoToJSON(value['offers']),
    };
}

