/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProductNamesDto
 */
export interface ProductNamesDto {
    /**
     * H1 title for the requested language
     * @type {string}
     * @memberof ProductNamesDto
     */
    h1Title?: string;
    /**
     * Meta description aligned with the requested language
     * @type {string}
     * @memberof ProductNamesDto
     */
    metaDescription?: string;
    /**
     * OpenGraph title for social sharing
     * @type {string}
     * @memberof ProductNamesDto
     */
    ogTitle?: string;
    /**
     * OpenGraph description for social sharing
     * @type {string}
     * @memberof ProductNamesDto
     */
    ogDescription?: string;
    /**
     * Offer names aggregated across datasources
     * @type {Set<string>}
     * @memberof ProductNamesDto
     */
    offerNames?: Set<string>;
    /**
     * Longest detected offer name
     * @type {string}
     * @memberof ProductNamesDto
     */
    longestOfferName?: string;
    /**
     * Shortest detected offer name
     * @type {string}
     * @memberof ProductNamesDto
     */
    shortestOfferName?: string;
}

/**
 * Check if a given object implements the ProductNamesDto interface.
 */
export function instanceOfProductNamesDto(value: object): value is ProductNamesDto {
    return true;
}

export function ProductNamesDtoFromJSON(json: any): ProductNamesDto {
    return ProductNamesDtoFromJSONTyped(json, false);
}

export function ProductNamesDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductNamesDto {
    if (json == null) {
        return json;
    }
    return {
        
        'h1Title': json['h1Title'] == null ? undefined : json['h1Title'],
        'metaDescription': json['metaDescription'] == null ? undefined : json['metaDescription'],
        'ogTitle': json['ogTitle'] == null ? undefined : json['ogTitle'],
        'ogDescription': json['ogDescription'] == null ? undefined : json['ogDescription'],
        'offerNames': json['offerNames'] == null ? undefined : new Set(json['offerNames']),
        'longestOfferName': json['longestOfferName'] == null ? undefined : json['longestOfferName'],
        'shortestOfferName': json['shortestOfferName'] == null ? undefined : json['shortestOfferName'],
    };
}

export function ProductNamesDtoToJSON(json: any): ProductNamesDto {
    return ProductNamesDtoToJSONTyped(json, false);
}

export function ProductNamesDtoToJSONTyped(value?: ProductNamesDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'h1Title': value['h1Title'],
        'metaDescription': value['metaDescription'],
        'ogTitle': value['ogTitle'],
        'ogDescription': value['ogDescription'],
        'offerNames': value['offerNames'] == null ? undefined : Array.from(value['offerNames'] as Set<any>),
        'longestOfferName': value['longestOfferName'],
        'shortestOfferName': value['shortestOfferName'],
    };
}

