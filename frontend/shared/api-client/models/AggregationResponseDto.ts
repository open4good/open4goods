/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AggregationBucketDto } from './AggregationBucketDto';
import {
    AggregationBucketDtoFromJSON,
    AggregationBucketDtoFromJSONTyped,
    AggregationBucketDtoToJSON,
    AggregationBucketDtoToJSONTyped,
} from './AggregationBucketDto';

/**
 * 
 * @export
 * @interface AggregationResponseDto
 */
export interface AggregationResponseDto {
    /**
     * Aggregation name mirroring the request payload.
     * @type {string}
     * @memberof AggregationResponseDto
     */
    name?: string;
    /**
     * Aggregated field
     * @type {string}
     * @memberof AggregationResponseDto
     */
    field?: AggregationResponseDtoFieldEnum;
    /**
     * Aggregation type
     * @type {string}
     * @memberof AggregationResponseDto
     */
    type?: AggregationResponseDtoTypeEnum;
    /**
     * Buckets yielded by the aggregation
     * @type {Array<AggregationBucketDto>}
     * @memberof AggregationResponseDto
     */
    buckets?: Array<AggregationBucketDto>;
    /**
     * Minimum observed value when applicable
     * @type {number}
     * @memberof AggregationResponseDto
     */
    min?: number;
    /**
     * Maximum observed value when applicable
     * @type {number}
     * @memberof AggregationResponseDto
     */
    max?: number;
}


/**
 * @export
 */
export const AggregationResponseDtoFieldEnum = {
    PriceMinPricePrice: 'price.minPrice.price',
    OffersCount: 'offersCount',
    PriceConditions: 'price.conditions',
    AttributesReferentielAttributesBrand: 'attributes.referentielAttributes.BRAND',
    GtinInfosCountry: 'gtinInfos.country',
    DatasourceCodes: 'datasourceCodes'
} as const;
export type AggregationResponseDtoFieldEnum = typeof AggregationResponseDtoFieldEnum[keyof typeof AggregationResponseDtoFieldEnum];

/**
 * @export
 */
export const AggregationResponseDtoTypeEnum = {
    Terms: 'terms',
    Range: 'range'
} as const;
export type AggregationResponseDtoTypeEnum = typeof AggregationResponseDtoTypeEnum[keyof typeof AggregationResponseDtoTypeEnum];


/**
 * Check if a given object implements the AggregationResponseDto interface.
 */
export function instanceOfAggregationResponseDto(value: object): value is AggregationResponseDto {
    return true;
}

export function AggregationResponseDtoFromJSON(json: any): AggregationResponseDto {
    return AggregationResponseDtoFromJSONTyped(json, false);
}

export function AggregationResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AggregationResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'field': json['field'] == null ? undefined : json['field'],
        'type': json['type'] == null ? undefined : json['type'],
        'buckets': json['buckets'] == null ? undefined : ((json['buckets'] as Array<any>).map(AggregationBucketDtoFromJSON)),
        'min': json['min'] == null ? undefined : json['min'],
        'max': json['max'] == null ? undefined : json['max'],
    };
}

export function AggregationResponseDtoToJSON(json: any): AggregationResponseDto {
    return AggregationResponseDtoToJSONTyped(json, false);
}

export function AggregationResponseDtoToJSONTyped(value?: AggregationResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'field': value['field'],
        'type': value['type'],
        'buckets': value['buckets'] == null ? undefined : ((value['buckets'] as Array<any>).map(AggregationBucketDtoToJSON)),
        'min': value['min'],
        'max': value['max'],
    };
}

