/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Agg
 */
export interface Agg {
    /**
     * Aggregation name
     * @type {string}
     * @memberof Agg
     */
    name?: string;
    /**
     * Field mapping to aggregate
     * @type {string}
     * @memberof Agg
     */
    field?: string;
    /**
     * Aggregation type
     * @type {string}
     * @memberof Agg
     */
    type?: AggTypeEnum;
    /**
     * Minimum value for range aggregations
     * @type {number}
     * @memberof Agg
     */
    min?: number;
    /**
     * Maximum value for range aggregations
     * @type {number}
     * @memberof Agg
     */
    max?: number;
    /**
     * Maximum number of buckets to return. For range aggregations this represents the desired bucket count.
     * @type {number}
     * @memberof Agg
     */
    buckets?: number;
    /**
     * Interval size for range aggregations. When provided it overrides the automatic bucket interval computation.
     * @type {number}
     * @memberof Agg
     */
    step?: number;
}


/**
 * @export
 */
export const AggTypeEnum = {
    Terms: 'terms',
    Range: 'range'
} as const;
export type AggTypeEnum = typeof AggTypeEnum[keyof typeof AggTypeEnum];


/**
 * Check if a given object implements the Agg interface.
 */
export function instanceOfAgg(value: object): value is Agg {
    return true;
}

export function AggFromJSON(json: any): Agg {
    return AggFromJSONTyped(json, false);
}

export function AggFromJSONTyped(json: any, ignoreDiscriminator: boolean): Agg {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'field': json['field'] == null ? undefined : json['field'],
        'type': json['type'] == null ? undefined : json['type'],
        'min': json['min'] == null ? undefined : json['min'],
        'max': json['max'] == null ? undefined : json['max'],
        'buckets': json['buckets'] == null ? undefined : json['buckets'],
        'step': json['step'] == null ? undefined : json['step'],
    };
}

export function AggToJSON(json: any): Agg {
    return AggToJSONTyped(json, false);
}

export function AggToJSONTyped(value?: Agg | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'field': value['field'],
        'type': value['type'],
        'min': value['min'],
        'max': value['max'],
        'buckets': value['buckets'],
        'step': value['step'],
    };
}

