/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface Agg
 */
export interface Agg {
  /**
   * Aggregation name
   * @type {string}
   * @memberof Agg
   */
  name?: string
  /**
   * Field to aggregate
   * @type {string}
   * @memberof Agg
   */
  field?: AggFieldEnum
  /**
   * Aggregation type
   * @type {string}
   * @memberof Agg
   */
  type?: AggTypeEnum
  /**
   *
   * @type {any}
   * @memberof Agg
   */
  subAgg?: any | null
  /**
   * Minimum value for range aggregations
   * @type {number}
   * @memberof Agg
   */
  min?: number
  /**
   * Maximum value for range aggregations
   * @type {number}
   * @memberof Agg
   */
  max?: number
}

/**
 * @export
 */
export const AggFieldEnum = {
  PriceMinPricePrice: 'price.minPrice.price',
  OffersCount: 'offersCount',
} as const
export type AggFieldEnum = (typeof AggFieldEnum)[keyof typeof AggFieldEnum]

/**
 * @export
 */
export const AggTypeEnum = {
  Terms: 'terms',
  Range: 'range',
} as const
export type AggTypeEnum = (typeof AggTypeEnum)[keyof typeof AggTypeEnum]

/**
 * Check if a given object implements the Agg interface.
 */
export function instanceOfAgg(value: object): value is Agg {
  return true
}

export function AggFromJSON(json: any): Agg {
  return AggFromJSONTyped(json, false)
}

export function AggFromJSONTyped(json: any, ignoreDiscriminator: boolean): Agg {
  if (json == null) {
    return json
  }
  return {
    name: json['name'] == null ? undefined : json['name'],
    field: json['field'] == null ? undefined : json['field'],
    type: json['type'] == null ? undefined : json['type'],
    subAgg: json['subAgg'] == null ? undefined : json['subAgg'],
    min: json['min'] == null ? undefined : json['min'],
    max: json['max'] == null ? undefined : json['max'],
  }
}

export function AggToJSON(json: any): Agg {
  return AggToJSONTyped(json, false)
}

export function AggToJSONTyped(
  value?: Agg | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value
  }

  return {
    name: value['name'],
    field: value['field'],
    type: value['type'],
    subAgg: value['subAgg'],
    min: value['min'],
    max: value['max'],
  }
}
