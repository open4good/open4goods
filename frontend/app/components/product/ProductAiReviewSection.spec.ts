import { mountSuspended } from '@nuxt/test-utils/runtime'
import { describe, expect, it, vi } from 'vitest'
import { createI18n } from 'vue-i18n'
import { defineComponent, h } from 'vue'
import ProductAiReviewSection from './ProductAiReviewSection.vue'
import type { AiReviewAttributeDto, AiReviewDto, AiReviewSourceDto } from '~~/shared/api-client'

vi.mock('vuetify', () => ({
  useTheme: () => ({
    global: {
      current: { value: { dark: false } },
    },
  }),
}))

vi.mock('@hcaptcha/vue3-hcaptcha', () => ({
  default: defineComponent({
    name: 'VueHcaptchaStub',
    emits: ['verify', 'expired', 'error'],
    setup(_, { attrs }) {
      return () => h('div', { class: 'vue-hcaptcha-stub', ...attrs })
    },
  }),
}))

const ClientOnlyStub = defineComponent({
  name: 'ClientOnlyStub',
  setup(_, { slots }) {
    return () => slots.default?.() ?? null
  },
})

const VIconStub = defineComponent({
  name: 'VIconStub',
  inheritAttrs: false,
  props: {
    icon: { type: String, default: '' },
    size: { type: [String, Number], default: '' },
  },
  setup(props, { attrs, slots }) {
    const { class: className, ...rest } = attrs

    return () =>
      h(
        'span',
        {
          ...rest,
          class: ['v-icon-stub', className].filter(Boolean).join(' '),
          'data-icon': props.icon ?? '',
          'data-size': String(props.size ?? ''),
        },
        slots.default?.(),
      )
  },
})

const VTableStub = defineComponent({
  name: 'VTableStub',
  inheritAttrs: false,
  props: {
    density: { type: String, default: '' },
  },
  setup(props, { attrs, slots }) {
    const { class: className, ...rest } = attrs

    return () =>
      h(
        'table',
        {
          ...rest,
          class: ['v-table-stub', className].filter(Boolean).join(' '),
          'data-density': props.density,
        },
        slots.default?.(),
      )
  },
})

const VBtnStub = defineComponent({
  name: 'VBtnStub',
  inheritAttrs: false,
  props: {
    loading: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
  },
  setup(props, { attrs, slots }) {
    const { class: className, ...rest } = attrs

    return () =>
      h(
        'button',
        {
          ...rest,
          class: ['v-btn-stub', className].filter(Boolean).join(' '),
          'data-loading': props.loading ? 'true' : 'false',
          disabled: props.disabled || props.loading,
          type: 'button',
        },
        slots.default?.(),
      )
  },
})

const VAlertStub = defineComponent({
  name: 'VAlertStub',
  inheritAttrs: false,
  setup(_, { attrs, slots }) {
    const { class: className, ...rest } = attrs

    return () =>
      h(
        'div',
        {
          ...rest,
          class: ['v-alert-stub', className].filter(Boolean).join(' '),
        },
        slots.default?.(),
      )
  },
})

const VProgressLinearStub = defineComponent({
  name: 'VProgressLinearStub',
  inheritAttrs: false,
  props: {
    modelValue: { type: Number, default: 0 },
    color: { type: String, default: 'primary' },
  },
  setup(props, { attrs }) {
    const { class: className, ...rest } = attrs

    return () =>
      h('div', {
        ...rest,
        class: ['v-progress-linear-stub', className].filter(Boolean).join(' '),
        'data-value': String(props.modelValue ?? 0),
        'data-color': props.color,
      })
  },
})

const i18nMessages = {
  'en-US': {
    product: {
      aiReview: {
        title: 'AI review',
        subtitle: 'Key takeaways generated by our assistant.',
        generatedAt: 'Generated on {date}',
        requestButton: 'Request an AI review',
        empty: 'No AI review is available for this product yet.',
        sections: {
          overall: 'Overall summary',
          details: 'Details and highlights',
          technical: 'Technical analysis',
          ecological: 'Ecological impact',
          pros: 'Strengths',
          cons: 'Limitations',
          identity: 'Identity card',
          sources: 'Sources',
        },
        sources: {
          index: '#',
          source: 'Source',
          description: 'Description',
        },
        status: {
          failed: 'Generation failed',
          success: 'Review generated',
          running: 'Generation in progress: {step}',
        },
        errors: {
          captcha: 'Captcha validation failed.',
          generic: 'Unable to generate a review.',
        },
      },
    },
  },
}

const createI18nPlugin = () =>
  createI18n({
    legacy: false,
    locale: 'en-US',
    fallbackLocale: 'en-US',
    messages: i18nMessages,
  })

const defaultAttributes: AiReviewAttributeDto[] = [
  { name: 'Brand', value: 'Samsung' },
  { name: 'Model', value: 'TQ65S90D' },
]

const defaultSources: AiReviewSourceDto[] = [
  {
    number: 1,
    name: 'Open4Goods',
    description: 'Manufacturer data sheet',
    url: 'https://example.com/source',
    favicon: 'https://example.com/icon.png',
  },
]

const mountComponent = (props: Partial<InstanceType<typeof ProductAiReviewSection>['$props']>) =>
  mountSuspended(ProductAiReviewSection, {
    props: {
      sectionId: 'ai',
      gtin: '123456789',
      siteKey: '',
      ...props,
    },
    global: {
      plugins: [[createI18nPlugin()]],
      stubs: {
        ClientOnly: ClientOnlyStub,
        VIcon: VIconStub,
        'v-icon': VIconStub,
        VTable: VTableStub,
        'v-table': VTableStub,
        VBtn: VBtnStub,
        'v-btn': VBtnStub,
        VAlert: VAlertStub,
        'v-alert': VAlertStub,
        VProgressLinear: VProgressLinearStub,
        'v-progress-linear': VProgressLinearStub,
      },
    },
  })

describe('ProductAiReviewSection', () => {
  it('renders the structured review content with highlighted sections', async () => {
    const review: AiReviewDto = {
      mediumTitle: 'Samsung TQ65S90D 2024 overview',
      shortDescription: 'A premium QLED TV with balanced performance.',
      summary: 'The product balances vivid visuals with smart integrations for a seamless living room experience.',
      description:
        '<p>The TQ65S90D focuses on brightness control and a <a class="review-ref" href="#review-ref-1">detailed contrast engine</a>.</p>',
      technicalReview: '<p>HDMI 2.1 ports, Wi-Fi 6 support and a 120 Hz panel provide future-proof connectivity.</p>',
      ecologicalReview: '<p>Packaging uses recycled fibres and the standby consumption stays below 0.5W.</p>',
      pros: ['Excellent brightness calibration', 'Robust gaming features'],
      cons: ['Lacks bundled camera accessories'],
      attributes: defaultAttributes,
      sources: defaultSources,
    }

    const wrapper = await mountComponent({ initialReview: review, reviewCreatedAt: Date.UTC(2024, 3, 12) })

    expect(wrapper.get('.product-ai-review__title').text()).toBe('AI review')
    expect(wrapper.get('.product-ai-review__subtitle').text()).toBe('Key takeaways generated by our assistant.')

    const metadata = wrapper.get('.product-ai-review__metadata').text()
    expect(metadata).toContain('Generated on')
    expect(metadata).toMatch(/2024/)

    const introTitle = wrapper.get('.product-ai-review__article-title').text()
    expect(introTitle).toContain('Samsung TQ65S90D 2024 overview')

    const cards = wrapper.findAll('.product-ai-review__card')
    expect(cards).toHaveLength(4)

    const summaryCard = cards[0]
    expect(summaryCard.text()).toContain('Overall summary')
    expect(summaryCard.text()).toContain('balances vivid visuals')

    const richtextHtml = wrapper.get('.product-ai-review__richtext').html()
    expect(richtextHtml).toContain('review-ref-1')

    const prosItems = wrapper.findAll('.product-ai-review__list-item')
    expect(prosItems).toHaveLength(3)
    expect(prosItems[0].text()).toContain('Excellent brightness calibration')
    expect(prosItems[2].text()).toContain('Lacks bundled camera accessories')

    const prosIcon = wrapper.get('.product-ai-review__panel-icon--pros .v-icon-stub')
    expect(prosIcon.attributes('data-icon')).toBe('mdi-thumb-up-outline')

    const attributeRows = wrapper.findAll('.product-ai-review__attributes .v-table-stub tbody tr')
    expect(attributeRows).toHaveLength(defaultAttributes.length)

    const sourceRows = wrapper.findAll('.product-ai-review__sources .v-table-stub tbody tr')
    expect(sourceRows).toHaveLength(defaultSources.length)
    expect(sourceRows[0].text()).toContain('Manufacturer data sheet')
  })

  it('renders the empty state when no review content is available', async () => {
    const wrapper = await mountComponent({ initialReview: null })

    expect(wrapper.get('.product-ai-review__empty-message').text()).toBe(
      'No AI review is available for this product yet.',
    )

    expect(wrapper.get('.v-btn-stub').text()).toBe('Request an AI review')
    expect(wrapper.find('.product-ai-review__content').exists()).toBe(false)
  })
})
