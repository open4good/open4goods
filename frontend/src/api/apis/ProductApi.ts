/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageProductDto,
  ProductDto,
} from '../models/index';
import {
    PageProductDtoFromJSON,
    PageProductDtoToJSON,
    ProductDtoFromJSON,
    ProductDtoToJSON,
} from '../models/index';

export interface ProductRequest {
    gtin: number;
    include?: Array<ProductIncludeEnum>;
}

export interface ProductsRequest {
    include?: Array<ProductsIncludeEnum>;
    pageNumber?: number;
    pageSize?: number;
    sort?: Array<ProductsSortEnum>;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     * Return high‑level product information and aggregated scores.
     * Get product view
     */
    async productRaw(requestParameters: ProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDto>> {
        if (requestParameters['gtin'] == null) {
            throw new runtime.RequiredError(
                'gtin',
                'Required parameter "gtin" was null or undefined when calling product().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/products/{gtin}`;
        urlPath = urlPath.replace(`{${"gtin"}}`, encodeURIComponent(String(requestParameters['gtin'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }

    /**
     * Return high‑level product information and aggregated scores.
     * Get product view
     */
    async product(requestParameters: ProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDto> {
        const response = await this.productRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return paginated products.
     * List products
     */
    async productsRaw(requestParameters: ProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDto<any>>> {
        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/products`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return paginated products.
     * List products
     */
    async products(requestParameters: ProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDto<any>> {
        const response = await this.productsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ProductIncludeEnum = {
    Base: 'base',
    Names: 'names',
    Resources: 'resources',
    AiReview: 'aiReview',
    Offers: 'offers'
} as const;
export type ProductIncludeEnum = typeof ProductIncludeEnum[keyof typeof ProductIncludeEnum];
/**
 * @export
 */
export const ProductsIncludeEnum = {
    Base: 'base',
    Names: 'names',
    Resources: 'resources',
    AiReview: 'aiReview',
    Offers: 'offers'
} as const;
export type ProductsIncludeEnum = typeof ProductsIncludeEnum[keyof typeof ProductsIncludeEnum];
/**
 * @export
 */
export const ProductsSortEnum = {
    PriceMinPricePrice: 'price.minPrice.price',
    OffersCount: 'offersCount'
} as const;
export type ProductsSortEnum = typeof ProductsSortEnum[keyof typeof ProductsSortEnum];
