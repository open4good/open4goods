/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlogPostDto,
  BlogTagDto,
} from '../models/index';
import {
    BlogPostDtoFromJSON,
    BlogPostDtoToJSON,
    BlogTagDtoFromJSON,
    BlogTagDtoToJSON,
} from '../models/index';

export interface PostRequest {
    slug: string;
}

export interface PostsRequest {
    tag?: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
}

/**
 * 
 */
export class BlogApi extends runtime.BaseAPI {

    /**
     * Return a single blog post identified by its slug.
     * Get blog post
     */
    async postRaw(requestParameters: PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogPostDto>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling post().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blog/posts/{slug}`;
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogPostDtoFromJSON(jsonValue));
    }

    /**
     * Return a single blog post identified by its slug.
     * Get blog post
     */
    async post(requestParameters: PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogPostDto> {
        const response = await this.postRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return paginated blog posts optionally filtered by tag.
     * List blog posts
     */
    async postsRaw(requestParameters: PostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlogPostDto>>> {
        const queryParameters: any = {};

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['UNKNOWN_PARAMETER_NAME'] != null) {
            queryParameters['page[number]'] = requestParameters['UNKNOWN_PARAMETER_NAME'];
        }

        if (requestParameters['UNKNOWN_PARAMETER_NAME2'] != null) {
            queryParameters['page[size]'] = requestParameters['UNKNOWN_PARAMETER_NAME2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blog/posts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogPostDtoFromJSON));
    }

    /**
     * Return paginated blog posts optionally filtered by tag.
     * List blog posts
     */
    async posts(requestParameters: PostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlogPostDto>> {
        const response = await this.postsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return an RSS feed for all blog posts.
     * Blog RSS feed
     */
    async rssRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blog/rss`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Return an RSS feed for all blog posts.
     * Blog RSS feed
     */
    async rss(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rssRaw(initOverrides);
    }

    /**
     * Return the list of available blog tags with post counts.
     * List blog tags
     */
    async tagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlogTagDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blog/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogTagDtoFromJSON));
    }

    /**
     * Return the list of available blog tags with post counts.
     * List blog tags
     */
    async tags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlogTagDto>> {
        const response = await this.tagsRaw(initOverrides);
        return await response.value();
    }

}
