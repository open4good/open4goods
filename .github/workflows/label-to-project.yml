name: Assign Issues to GitHub Projects V2

# Automatically routes issues to the appropriate GitHub Project V2 board
# based on their labels. Issues without a `squad:*` label or with the
# `EPIC` label are added to the PMO board and placed in the `Triage`
# column. Triggered for newly opened issues and whenever labels are added.

on:
  issues:
    types: [opened, labeled]

env:
  ORG_NAME: open4good
  PROJECT_ID_MAPPING: |
    squad:ux=PVT_kwDOBOJOp84A2ZRZ
    squad:backend=PVT_kwDOBOJOp84A8xdZ
    squad:exposition=PVT_kwDOBOJOp84A8xdy
    squad:pmo=PVT_kwDOBOJOp84A8tDc
    EPIC=PVT_kwDOBOJOp84A8tDc
  PMO_PROJECT_ID: PVT_kwDOBOJOp84A8tDc
  PMO_STATUS_FIELD_ID: ${{ secrets.PMO_STATUS_FIELD_ID }}
  PMO_TRIAGE_OPTION_ID: ${{ secrets.PMO_TRIAGE_OPTION_ID }}

jobs:
  assign-to-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const mapping = Object.fromEntries(
              process.env.PROJECT_ID_MAPPING
                .trim()
                .split('\n')
                .map(line => line.trim().split('='))
            );

            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            const hasSquad = labels.some(n => n.startsWith('squad:'));
            const hasEpic = labels.includes('EPIC');
            const labelName = context.payload.action === 'labeled' ? context.payload.label.name : null;

            if (labelName && mapping[labelName]) {
              const projectId = mapping[labelName];
              try {
                await github.graphql(
                  `mutation($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) { item { id } } }`,
                  { projectId, contentId: issue.node_id }
                );
                console.log(`Issue #${issue.number} added to project ID ${projectId}.`);
              } catch (e) {
                console.log(`Unable to add to project ${projectId}: ${e.message}`);
              }
            }

            if (!hasSquad || hasEpic) {
              const projectId = process.env.PMO_PROJECT_ID;
              const addRes = await github.graphql(
                `mutation($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) { item { id } } }`,
                { projectId, contentId: issue.node_id }
              );
              const itemId = addRes.addProjectV2ItemById.item.id;
              await github.graphql(
                `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { item { id } } }`,
                {
                  projectId,
                  itemId,
                  fieldId: process.env.PMO_STATUS_FIELD_ID,
                  optionId: process.env.PMO_TRIAGE_OPTION_ID,
                }
              );
              console.log(`Issue #${issue.number} routed to PMO project.`);
            }

