name: Assign Issues to GitHub Projects V2

on:
  issues:
    types: [opened, labeled, unlabeled]
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Ne rien modifier, seulement logguer"
        required: false
        type: boolean
        default: false

env:
  ORG_NAME: open4good
  # label=projectNodeID
  PROJECT_ID_MAPPING: |
    squad:pmo=PVT_kwDOBOJOp84A8tDc
    squad:ux=PVT_kwDOBOJOp84A2ZQ8
    squad:backend=PVT_kwDOBOJOp84A2ZRZ
    squad:platform=PVT_kwDOBOJOp84BB-GS
    epic=PVT_kwDOBOJOp84A8tDc
    EPIC=PVT_kwDOBOJOp84A8tDc
    userstory=PVT_kwDOBOJOp84A8tDc
    risky=PVT_kwDOBOJOp84A8tDc
  IF_UNMATCH: PVT_kwDOBOJOp84A8tDc

jobs:
  assign:
    runs-on: ubuntu-latest
    steps:
      - name: Run assignment script
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |

            // ---------- Helpers ----------
            function parseMapping(str) {
              return Object.fromEntries(
                str.trim().split('\n').map(l => {
                  const [k, v] = l.trim().split('=');
                  return [k.toLowerCase(), v.trim()];
                })
              );
            }

            async function assertProjectsExist(projectIds) {
              const unique = [...new Set(projectIds.filter(Boolean))];
              if (unique.length === 0) return {};
              const query = `
                query($ids: [ID!]!) {
                  nodes(ids: $ids) {
                    ... on ProjectV2 { id title __typename }
                    id
                    __typename
                  }
                }
              `;
              const res = await github.graphql(query, { ids: unique });
              const missing = [];
              const map = {};
              res.nodes.forEach((n, i) => {
                if(!n || n.__typename !== 'ProjectV2') {
                  missing.push(unique[i]);
                } else {
                  map[n.id] = n.title;
                }
              });
              if(missing.length) {
                core.setFailed(`Project IDs introuvables: ${missing.join(', ')}`);
                throw new Error('Unknown project ids');
              }
              return map;
            }

            async function getIssueProjectItems(issueNodeId) {
              const q = `
                query($id: ID!) {
                  node(id: $id) {
                    ... on Issue {
                      projectItems(first: 100) {
                        nodes {
                          id
                          project { id title }
                        }
                      }
                    }
                  }
                }
              `;
              const r = await github.graphql(q, { id: issueNodeId });
              return r.node.projectItems.nodes.map(n => ({
                itemId: n.id,
                projectId: n.project.id,
                projectTitle: n.project.title
              }));
            }

            async function addIssueToProject(issueNodeId, projectId) {
              const mutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item { id }
                  }
                }
              `;
              return github.graphql(mutation, { projectId, contentId: issueNodeId });
            }

            async function removeItem(itemId, projectId) {
              const mutation = `
                mutation DeleteItem($projectId: ID!, $itemId: ID!) {
                  deleteProjectV2Item(input: { projectId: $projectId, itemId: $itemId }) {
                    deletedItemId
                  }
                }
              `;
              await github.graphql(mutation, { projectId, itemId });
            }
            
            function desiredProjectsForLabels(labels, mapping, ifUnmatch) {
              const projects = new Set();
              labels.forEach(l => {
                const p = mapping[l.toLowerCase()];
                if (p) projects.add(p);
              });
              if (projects.size === 0 && ifUnmatch) projects.add(ifUnmatch);
              return [...projects];
            }

            async function processOneIssue(issueNumber, dryRun, mapping, IF_UNMATCH) {
              const { owner, repo } = context.repo;
              const issue = (await github.rest.issues.get({ owner, repo, issue_number: issueNumber })).data;
              
              // Si c'est un PR, on skippe (REST renvoie un champ pull_request pour les PR)
               if (issue.pull_request) {
                 core.info(`PR #${issueNumber} détecté, ignoré.`);
                 return;
              }

              const labels = issue.labels.map(l => (typeof l === 'string' ? l : l.name)).map(s => s.toLowerCase());
              core.info(`Issue #${issueNumber} labels: ${labels.join(', ') || '(none)'}`);

              const desired = desiredProjectsForLabels(labels, mapping, IF_UNMATCH);
              core.info(`Desired projects: ${desired.join(', ') || '(none)'}`);

              const existingItems = await getIssueProjectItems(issue.node_id);
              const existingProjectIds = existingItems.map(i => i.projectId);

              const toAdd = desired.filter(id => !existingProjectIds.includes(id));
              const toRemove = existingItems.filter(i => !desired.includes(i.projectId));

              core.info(`Current projects: ${existingProjectIds.join(', ') || '(none)'}`);
              core.info(`Will add: ${toAdd.join(', ') || '(none)'}`);
              core.info(`Will remove: ${toRemove.map(i=>i.projectId).join(', ') || '(none)'}`);

              if (dryRun) {
                core.info('[DRY RUN] Aucun changement appliqué.');
                return;
              }

              for (const p of toAdd) {
                try {
                  await addIssueToProject(issue.node_id, p);
                  core.info(`✅ Added issue #${issueNumber} to project ${p}`);
                } catch (e) {
                  core.setFailed(`❌ Failed to add issue #${issueNumber} to project ${p}: ${e.message}`);
                  throw e;
                }
              }

              for (const item of toRemove) {
                try {
                  await removeItem(item.itemId, item.projectId);
                  core.info(`🗑️ Removed issue #${issueNumber} from project ${item.projectId}`);
                } catch (e) {
                  core.setFailed(`❌ Failed to remove issue #${issueNumber} from project ${item.projectId}: ${e.message}`);
                  throw e;
                }
              }
            }

            // ---------- Main ----------
            const mapping = parseMapping(process.env.PROJECT_ID_MAPPING || '');
            const IF_UNMATCH = (process.env.IF_UNMATCH || '').trim();
            const dryRun = core.getInput('dry_run') === 'true';

            // Validate all project IDs up front
            const allProjectIds = Object.values(mapping).concat(IF_UNMATCH ? [IF_UNMATCH] : []);
            const idToTitle = await assertProjectsExist(allProjectIds);
            core.info('✅ Projects vérifiés: ' + Object.entries(idToTitle).map(([id,t])=>`${t} (${id})`).join(', '));

            let issueNumbers = [];

            if (context.eventName === 'issues') {
              issueNumbers = [context.payload.issue.number];
            } else {
              // workflow_dispatch -> traiter toutes les issues ouvertes
              const { owner, repo } = context.repo;
              let page = 1;
              while(true) {
                const res = await github.rest.issues.listForRepo({ owner, repo, state: 'open', per_page: 100, page });
                if (res.data.length === 0) break;
                res.data.forEach(i => issueNumbers.push(i.number));
                page++;
              }
              if (issueNumbers.length === 0) {
                core.warning('Aucune issue ouverte à traiter.');
                return;
              }
            }

            core.startGroup(`Processing ${issueNumbers.length} issue(s)`);
            for (const num of issueNumbers) {
              await processOneIssue(num, dryRun, mapping, IF_UNMATCH);
            }
            core.endGroup();

            core.info('🎉 Terminé.');
