name: Dispatch to Project Based on Label

on:
  issues:
    types: [labeled]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'triage'

    permissions:
      contents: read
      issues: write
      pull-requests: write
      project: write

    steps:
      - name: Add issue to project
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = "PVT_kwDOBOJOp84A8tDc";
            const fieldName = "Status";
            const fieldOption = "Triage";
            const labelName = "triage";

            const issue = context.payload.issue;
            const issueNodeId = issue.node_id;

            const result = await github.graphql(`
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `, {
              projectId,
              contentId: issueNodeId
            });

            const itemId = result.addProjectV2ItemById.item.id;

            const project = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 100) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const fields = project.node.fields.nodes;
            const statusField = fields.find(f => f.name === fieldName);
            const option = statusField.options.find(o => o.name === fieldOption);

            if (!statusField || !option) {
              throw new Error(`Field or option not found: ${fieldName} / ${fieldOption}`);
            }

            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: statusField.id,
              optionId: option.id
            });

            console.log(`Issue added to project and status set to "${fieldOption}"`);
