package org.open4goods.nudgerfrontapi.controller.api;

import java.net.URI;

import org.open4goods.model.RolesConstants;
import org.open4goods.nudgerfrontapi.localization.DomainLanguage;
import org.open4goods.nudgerfrontapi.service.AffiliationService;
import org.open4goods.nudgerfrontapi.service.exception.InvalidAffiliationTokenException;
import org.open4goods.nudgerfrontapi.utils.IpUtils;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;

/**
 * REST controller responsible for resolving affiliation redirect tokens and registering the redirect.
 */
@RestController
@RequestMapping("/affiliations")
@Validated
@PreAuthorize("hasAnyAuthority('" + RolesConstants.ROLE_FRONTEND + "', '" + RolesConstants.ROLE_EDITOR + "')")
@Tag(name = "Affiliation", description = "Resolve affiliation redirect tokens and register redirect telemetry.")
public class AffiliationController {

    private final AffiliationService affiliationService;

    public AffiliationController(AffiliationService affiliationService) {
        this.affiliationService = affiliationService;
    }

    /**
     * Resolve an affiliation token using an idempotent GET request.
     *
     * @param token          encrypted affiliation token generated by the product catalogue
     * @param domainLanguage domain language hint required by the API contract
     * @param request        HTTP request to extract the caller IP
     * @param userAgent      HTTP User-Agent header (optional)
     * @return a 301 redirect towards the decoded affiliation URL
     */
    @GetMapping("/redirect")
    @Operation(
            summary = "Resolve affiliation token (GET)",
            description = "Decode an affiliation token, persist tracking metadata and redirect the client.",
            parameters = {
                    @Parameter(name = "token", in = ParameterIn.QUERY, required = true,
                            description = "Affiliation token obtained from the product catalogue.",
                            schema = @Schema(type = "string")),
                    @Parameter(name = "domainLanguage", in = ParameterIn.QUERY, required = true,
                            description = "Language driving localisation of textual fields (future use).",
                            schema = @Schema(implementation = DomainLanguage.class))
            },
            responses = {
                    @ApiResponse(responseCode = "301", description = "Redirect to affiliation partner",
                            headers = {
                                    @Header(name = HttpHeaders.LOCATION,
                                            description = "Decoded affiliation destination.",
                                            schema = @Schema(type = "string", format = "uri")),
                                    @Header(name = "X-Locale",
                                            description = "Resolved locale for textual payloads.",
                                            schema = @Schema(type = "string", example = "fr-FR"))
                            }),
                    @ApiResponse(responseCode = "400", description = "Invalid affiliation token",
                            content = @Content(mediaType = "application/problem+json",
                                    schema = @Schema(implementation = ProblemDetail.class))),
                    @ApiResponse(responseCode = "500", description = "Internal server error",
                            content = @Content(mediaType = "application/problem+json",
                                    schema = @Schema(implementation = ProblemDetail.class)))
            }
    )
    public ResponseEntity<Void> redirectGet(@RequestParam String token,
            @RequestParam(name = "domainLanguage") DomainLanguage domainLanguage,
            HttpServletRequest request,
            @RequestHeader(name = HttpHeaders.USER_AGENT, required = false) String userAgent) {
        return handleRedirect(token, domainLanguage, request, userAgent);
    }

    /**
     * Resolve an affiliation token using a POST request (mirrors the GET contract).
     *
     * @param token          encrypted affiliation token generated by the product catalogue
     * @param domainLanguage domain language hint required by the API contract
     * @param request        HTTP request to extract the caller IP
     * @param userAgent      HTTP User-Agent header (optional)
     * @return a 301 redirect towards the decoded affiliation URL
     */
    @PostMapping("/redirect")
    @Operation(
            summary = "Resolve affiliation token (POST)",
            description = "Decode an affiliation token, persist tracking metadata and redirect the client.",
            parameters = {
                    @Parameter(name = "token", in = ParameterIn.QUERY, required = true,
                            description = "Affiliation token obtained from the product catalogue.",
                            schema = @Schema(type = "string")),
                    @Parameter(name = "domainLanguage", in = ParameterIn.QUERY, required = true,
                            description = "Language driving localisation of textual fields (future use).",
                            schema = @Schema(implementation = DomainLanguage.class))
            },
            responses = {
                    @ApiResponse(responseCode = "301", description = "Redirect to affiliation partner",
                            headers = {
                                    @Header(name = HttpHeaders.LOCATION,
                                            description = "Decoded affiliation destination.",
                                            schema = @Schema(type = "string", format = "uri")),
                                    @Header(name = "X-Locale",
                                            description = "Resolved locale for textual payloads.",
                                            schema = @Schema(type = "string", example = "fr-FR"))
                            }),
                    @ApiResponse(responseCode = "400", description = "Invalid affiliation token",
                            content = @Content(mediaType = "application/problem+json",
                                    schema = @Schema(implementation = ProblemDetail.class))),
                    @ApiResponse(responseCode = "500", description = "Internal server error",
                            content = @Content(mediaType = "application/problem+json",
                                    schema = @Schema(implementation = ProblemDetail.class)))
            }
    )
    public ResponseEntity<Void> redirectPost(@RequestParam String token,
            @RequestParam(name = "domainLanguage") DomainLanguage domainLanguage,
            HttpServletRequest request,
            @RequestHeader(name = HttpHeaders.USER_AGENT, required = false) String userAgent) {
        return handleRedirect(token, domainLanguage, request, userAgent);
    }

    private ResponseEntity<Void> handleRedirect(String token, DomainLanguage domainLanguage, HttpServletRequest request,
            String userAgent) {
        String ip = IpUtils.getIp(request);
        String url = affiliationService.trackRedirect(token, ip, userAgent);
        try {
            URI target = URI.create(url);
            return ResponseEntity.status(HttpStatus.MOVED_PERMANENTLY)
                    .cacheControl(CacheControl.noStore())
                    .header(HttpHeaders.LOCATION, target.toString())
                    .header("X-Locale", domainLanguage.languageTag())
                    .build();
        }
        catch (IllegalArgumentException exception) {
            throw new InvalidAffiliationTokenException("Decoded URL is not a valid URI.", exception);
        }
    }
}
