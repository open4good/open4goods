# Directory structure 
- pom.xml
- src
--- main
---- java
----- org
------ open4goods
------- services
-------- captcha
--------- config
---------- CaptchaProperties.java
--------- HcaptchaUtil.java
--------- service
---------- HcaptchaService.java
---- resources
----- META-INF
------ additional-spring-configuration-metadata.json
--- test
---- java
----- org
------ open4goods
------- services
-------- captcha
--------- service
---------- HcaptchaServiceTest.java
---- resources

# Files content

## [HcaptchaService.java - /home/goulven/git/open4goods/services/captcha/src/main/java/org/open4goods/services/captcha/service/HcaptchaService.java]
~~~
package org.open4goods.services.captcha.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.open4goods.services.captcha.HcaptchaUtil;
import org.open4goods.services.captcha.config.CaptchaProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

/**
 * Service that performs hCaptcha Recaptcha validation and assigns a spring role to users 
 * upon successful verification.
 * <p>
 * This class uses the {@link CaptchaProperties} configuration to retrieve the secret key 
 * and the role that must be assigned to a valid user.
 * </p>
 * 
 * @author Goulven
 */
@Service
public class HcaptchaService {

    private static final String H_RECAPTCHA_VERIFY_URL = "https://api.hcaptcha.com/siteverify";
    private static final Logger logger = LoggerFactory.getLogger(HcaptchaService.class);

    private final CaptchaProperties captchaProperties;
    private final RestTemplate restTemplate;

    /**
     * Constructor that initializes the service with externalized captcha properties and a RestTemplate.
     *
     * @param captchaProperties the configuration properties for captcha verification
     * @param restTemplateBuilder the builder to create a RestTemplate instance
     */
    public HcaptchaService(CaptchaProperties captchaProperties, RestTemplateBuilder restTemplateBuilder) {
        this.captchaProperties = captchaProperties;
        this.restTemplate = restTemplateBuilder.build();
    }

    /**
     * Verifies the captcha response and, if valid, assigns the configured spring role to the current user.
     *
     * @param ip the remote IP address of the user
     * @param recaptchaResponse the captcha response token
     * @throws SecurityException if captcha verification fails
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public void verifyRecaptcha(final String ip, final String recaptchaResponse) throws SecurityException {
        final Map<String, String> body = new HashMap<>();
        body.put("secret", captchaProperties.getSecretKey());
        body.put("response", recaptchaResponse);
        body.put("remoteip", ip);

        final ResponseEntity<Map> recaptchaResponseEntity = restTemplate.postForEntity(
                H_RECAPTCHA_VERIFY_URL + "?secret={secret}&response={response}&remoteip={remoteip}",
                body, Map.class, body);

        final Map<String, Object> responseBody = recaptchaResponseEntity.getBody();
        final boolean recaptchaSuccess = (Boolean) responseBody.get("success");

        if (!recaptchaSuccess) {
            final List<String> errorCodes = (List) responseBody.get("error-codes");
            final String errorMessage = errorCodes.stream()
                    .map(HcaptchaUtil.RECAPTCHA_ERROR_CODE::get)
                    .collect(Collectors.joining(", "));
            logger.warn("Captcha verification failed: {}", errorMessage);
            throw new SecurityException(errorMessage);
        }

        // On successful captcha verification, assign the configured spring role to the user
        assignRoleToUser(captchaProperties.getValidRole());
        logger.info("Captcha verified successfully, assigned role: {}", captchaProperties.getValidRole());
    }

    /**
     * Updates the current Spring Security context by adding the given role to the user's granted authorities.
     *
     * @param role the role to assign to the authenticated user
     */
    private void assignRoleToUser(String role) {
        Authentication currentAuth = SecurityContextHolder.getContext().getAuthentication();
        if (currentAuth != null && currentAuth.isAuthenticated()) {
            // Copy current authorities and add new role if not already present
            List<GrantedAuthority> updatedAuthorities = new ArrayList<>(currentAuth.getAuthorities());
            SimpleGrantedAuthority newAuthority = new SimpleGrantedAuthority(role);
            if (updatedAuthorities.stream().noneMatch(auth -> auth.getAuthority().equals(newAuthority.getAuthority()))) {
                updatedAuthorities.add(newAuthority);
            }
            // Create a new authentication token with the updated authorities
            Authentication newAuth = new UsernamePasswordAuthenticationToken(
                    currentAuth.getPrincipal(), currentAuth.getCredentials(), updatedAuthorities);
            SecurityContextHolder.getContext().setAuthentication(newAuth);
            logger.debug("Updated authentication authorities: {}", updatedAuthorities);
        } else {
            logger.warn("No authenticated user found. Role {} not assigned.", role);
        }
    }
}
~~~

## [HcaptchaServiceTest.java - /home/goulven/git/open4goods/services/captcha/src/test/java/org/open4goods/services/captcha/service/HcaptchaServiceTest.java]
~~~
package org.open4goods.services.captcha.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.open4goods.services.captcha.config.CaptchaProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;

public class HcaptchaServiceTest {

    private RestTemplate restTemplate;
    private RestTemplateBuilder restTemplateBuilder;
    private CaptchaProperties captchaProperties;
    private HcaptchaService recaptchaService;

    @BeforeEach
    public void setUp() {
        captchaProperties = new CaptchaProperties();
        captchaProperties.setSecretKey("dummySecret");
        captchaProperties.setValidRole("ROLE_CAPTCHA_VERIFIED");

        restTemplate = Mockito.mock(RestTemplate.class);
        restTemplateBuilder = Mockito.mock(RestTemplateBuilder.class);
        when(restTemplateBuilder.build()).thenReturn(restTemplate);

        // Set up a dummy authentication in the security context
        Authentication auth = new UsernamePasswordAuthenticationToken("user", "pass", new ArrayList<>());
        SecurityContextHolder.getContext().setAuthentication(auth);

        recaptchaService = new HcaptchaService(captchaProperties, restTemplateBuilder);
    }

    @Test
    public void testVerifyRecaptchaSuccess() {
        // Prepare a mock response for a successful captcha verification
        Map<String, Object> responseMap = new HashMap<>();
        responseMap.put("success", true);
        ResponseEntity<Map> responseEntity = ResponseEntity.ok(responseMap);
        when(restTemplate.postForEntity(anyString(), any(), eq(Map.class), any(Map.class)))
                .thenReturn(responseEntity);

        assertDoesNotThrow(() -> recaptchaService.verifyRecaptcha("127.0.0.1", "dummyResponse"));

        // Check that the role has been assigned
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        boolean hasRole = auth.getAuthorities().stream()
                .anyMatch(authority -> authority.getAuthority().equals("ROLE_CAPTCHA_VERIFIED"));
        assertTrue(hasRole);
    }

    @Test
    public void testVerifyRecaptchaFailure() {
        // Prepare a mock response for a failed captcha verification
        Map<String, Object> responseMap = new HashMap<>();
        responseMap.put("success", false);
        responseMap.put("error-codes", Arrays.asList("missing-input-response"));
        ResponseEntity<Map> responseEntity = ResponseEntity.ok(responseMap);
        when(restTemplate.postForEntity(anyString(), any(), eq(Map.class), any(Map.class)))
                .thenReturn(responseEntity);

        SecurityException exception = assertThrows(SecurityException.class,
                () -> recaptchaService.verifyRecaptcha("127.0.0.1", "dummyResponse"));
        assertTrue(exception.getMessage().contains("The response parameter is missing"));
    }
}
~~~

## [additional-spring-configuration-metadata.json - /home/goulven/git/open4goods/services/captcha/src/main/resources/META-INF/additional-spring-configuration-metadata.json]
~~~
{
  "groups": [
    {
      "name": "captcha",
      "type": "org.open4goods.services.captcha.config.CaptchaProperties",
      "sourceType": "org.open4goods.services.captcha.config.CaptchaProperties"
    }
  ],
  "properties": [
    {
      "name": "captcha.secret-key",
      "type": "java.lang.String",
      "description": "Secret key used for captcha verification.",
      "defaultValue": ""
    },
    {
      "name": "captcha.valid-role",
      "type": "java.lang.String",
      "description": "Spring Security role assigned to users upon successful captcha verification.",
      "defaultValue": "ROLE_CAPTCHA_VERIFIED"
    }
  ]
}
~~~

## [HcaptchaUtil.java - /home/goulven/git/open4goods/services/captcha/src/main/java/org/open4goods/services/captcha/HcaptchaUtil.java]
~~~
package org.open4goods.services.captcha;

import java.util.HashMap;
import java.util.Map;

public class HcaptchaUtil {

	public static final Map<String, String>
	RECAPTCHA_ERROR_CODE = new HashMap<>();

	static {
		RECAPTCHA_ERROR_CODE.put("missing-input-secret",
				"The secret parameter is missing");
		RECAPTCHA_ERROR_CODE.put("invalid-input-secret",
				"The secret parameter is invalid or malformed");
		RECAPTCHA_ERROR_CODE.put("missing-input-response",
				"The response parameter is missing");
		RECAPTCHA_ERROR_CODE.put("invalid-input-response",
				"The response parameter is invalid or malformed");
		RECAPTCHA_ERROR_CODE.put("bad-request",
				"The request is invalid or malformed");
	}
}~~~

## [CaptchaProperties.java - /home/goulven/git/open4goods/services/captcha/src/main/java/org/open4goods/services/captcha/config/CaptchaProperties.java]
~~~
package org.open4goods.services.captcha.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

/**
 * Configuration properties for captcha validation.
 * <p>
 * Holds the secret key used for captcha verification and the spring role to assign upon successful verification.
 * </p>
 */
@Component
@ConfigurationProperties(prefix = "captcha")
public class CaptchaProperties {

    /**
     * The secret key for captcha verification.
     */
    private String secretKey;

    /**
     * The spring role assigned to users upon successful captcha verification.
     */
    private String validRole = "ROLE_CAPTCHA_VERIFIED";

    public String getSecretKey() {
        return secretKey;
    }

    public void setSecretKey(String secretKey) {
        this.secretKey = secretKey;
    }

    public String getValidRole() {
        return validRole;
    }

    public void setValidRole(String validRole) {
        this.validRole = validRole;
    }

    /**
     * For security reasons, the secretKey is not displayed.
     */
    @Override
    public String toString() {
        return "CaptchaProperties{secretKey=****, validRole='" + validRole + '\'' + '}';
    }
}
~~~

## [pom.xml - /home/goulven/git/open4goods/services/captcha/pom.xml]
~~~
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.open4goods</groupId>
    <artifactId>org.open4goods</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>captcha</artifactId>
  
  
    <dependencies>
       
        <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-configuration-processor</artifactId>
        	<optional>true</optional>
        </dependency>
        
        <!-- TODO : Should not include starter, but classical spring deps-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>



    </dependencies>
  
  
    <build>
    <plugins>
      <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-jar-plugin</artifactId>
      <version>3.4.2</version>
      <executions>
        <execution>
          <goals>
            <goal>test-jar</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
      <!-- Maven Compiler Plugin -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>
      <!-- Spring Boot Maven Plugin -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  
</project>
~~~

## [pom.xml (pom parent) - /home/goulven/git/open4goods/pom.xml]
~~~
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.open4goods</groupId>
	<artifactId>org.open4goods</artifactId>
	<name>parent</name>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<description>The open4goods project parent pom</description>
	<url>https://github.com/open4good/open4goods</url>
	<properties>
		<github.global.server>github</github.global.server>
		<springboot.version>3.4.3</springboot.version>
		<java.version>21</java.version>
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<global.version>0.0.1-SNAPSHOT</global.version>
		<swagger.version>2.9.2</swagger.version>
		<jacoco.version>0.8.12</jacoco.version>
		<xwiki.version>11.10.2</xwiki.version>

		<processDependencyManagement>false</processDependencyManagement>
		<processPluginDependenciesInPluginManagement>true</processPluginDependenciesInPluginManagement>
		<maven-compiler-plugin-version>3.14.0</maven-compiler-plugin-version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>		
		<dependency.locations.enabled>false</dependency.locations.enabled>
		<exclude.tests>nothing-to-exclude</exclude.tests>
	</properties>

	<modules>
		<module>admin</module>
        <module>model</module>
		<module>commons</module>
		<module>verticals</module>
		<module>crawler</module>
		<module>api</module>
		<module>ui</module>
		<module>services/urlfetching</module>
        <module>services/googlesearch</module>
        <module>services/evaluation</module>
        <module>services/serialisation</module>
        <module>services/prompt</module>
        <module>services/review-generation</module>
        <module>services/product-repository</module>
        <module>services/captcha</module>
        
        
	</modules>

	<issueManagement>
		<url>https://github.com/open4good/open4goods/issues</url>
		<system>GitHub Issues</system>
	</issueManagement>

	<licenses>
		<license>
			<name>GNU AFFERO GENERAL PUBLIC LICENSE + Morality License</name>
			<url>
				https://raw.githubusercontent.com/open4good/open4goods/main/LICENSE</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<url>https://github.com/open4good/open4goods</url>
		<connection>scm:git://github.com/open4good/open4goods</connection>
	</scm>


	<repositories>
		<repository>
			<id>central</id>
			<url>https://repo1.maven.org/maven2</url>
		</repository>

	</repositories>


	<distributionManagement>
		<site>
			<id>maven</id>
			<url>https://nudger.fr</url>
		</site>
	</distributionManagement>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${springboot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<dependencies>

		<!--
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-docker-compose</artifactId>
		</dependency>
-->


		<dependency>
			<groupId>net.sf.barcode4j</groupId>
			<artifactId>barcode4j</artifactId>
			<version>2.1</version>
		</dependency>

		<dependency>
			<groupId>com.sleepycat</groupId>
			<artifactId>je</artifactId>
			<version>18.3.12</version>
		</dependency>


		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.18.0</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>


		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.13.0</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>



		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
	</dependencies>


	<reporting>


		<plugins>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>

				<reportSets>
					<reportSet>
						<reports>
							<report>report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.18.0</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>dependency-updates-report</report>
							<report>plugin-updates-report</report>
							<report>property-updates-report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>


			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
				<version>3.2.1</version>
				<configuration>
					<aggregate>true</aggregate>
					<xmlOutputDirectory>${project.build.directory}/site/taglist</xmlOutputDirectory>

				</configuration>
				<reportSets>
					<reportSet>
						<!-- defines taglist reports in the modules -->
						<id>taglist-report</id>
						<reports>
							<report>taglist</report>
						</reports>
					</reportSet>

					<reportSet>
						<!-- defines taglist aggregate report -->
						<id>taglist-aggregate</id>
						<inherited>false</inherited>
						<reports>
							<report>taglist</report>
						</reports>
						<configuration>
							<aggregate>true</aggregate>
						</configuration>
					</reportSet>
				</reportSets>
			</plugin>


			<!-- Maven site plugin configuration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.21.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>3.9.0</version>
			</plugin>

		</plugins>

	</reporting>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.5.0</version>
				<executions>
					<execution>
						<id>enforce-banned-dependencies</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<bannedDependencies>
									<excludes>
										<!--this is to check we do not have the xml-apis included since
											JRE provides it already -->
										<exclude>xml-apis:xml-apis</exclude>

									</excludes>
								</bannedDependencies>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Jacoco plugin configuration -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- Maven clean plugin configuration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.4.1</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>logs</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
						<fileset>
							<directory>target</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
						<fileset>
							<directory>data</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
                        <fileset>
                            <directory>dist</directory>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                        <fileset>
                            <directory>node_modules</directory>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                        <fileset>
                            <directory>node_modules</directory>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                        
						<fileset>
							<directory>src/test/resources/last</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.5.2</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>3.5.2</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.21.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>3.9.0</version>
			</plugin>

		</plugins>

		<pluginManagement>
			<plugins>
				<!-- Maven compiler plugin configuration -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin-version}</version>
					<configuration>
						<release>21</release>
						<source>21</source>
						<target>21</target>
						<forceJavacCompilerUse>true</forceJavacCompilerUse>
						<parameters>true</parameters>
					</configuration>
				</plugin>

				<!-- Jacoco plugin configuration -->
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>~~~

